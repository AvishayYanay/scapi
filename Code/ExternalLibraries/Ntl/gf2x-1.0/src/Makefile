# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#  This file is part of the gf2x library.
#
#  Copyright 2007, 2008, 2009, 2010
#  Richard Brent, Pierrick Gaudry, Emmanuel Thome', Paul Zimmermann
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2 of the License, or (at your
#  option) any later version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; see the file COPYING.  If not, write to the Free
#  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
#  02111-1307, USA.


pkgdatadir = $(datadir)/gf2x
pkgincludedir = $(includedir)/gf2x
pkglibdir = $(libdir)/gf2x
pkglibexecdir = $(libexecdir)/gf2x
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-cygwin
host_triplet = i686-pc-cygwin
target_triplet = i686-pc-cygwin
am__append_1 = tune_gen_mul1_w32k2$(EXEEXT) \
	tune_gen_mul1_w32k3$(EXEEXT) \
	tune_gen_mul1_w32k4$(EXEEXT) \
	tune_gen_mul1_w32k5$(EXEEXT) \
	tune_gen_mul1_w32k6$(EXEEXT)
am__append_2 = gen_mul1_w32k2.c \
	gen_mul1_w32k3.c gen_mul1_w32k4.c \
	gen_mul1_w32k5.c gen_mul1_w32k6.c
#am__append_3 = tune_gen_mul1_w64k2$(EXEEXT) \
#	tune_gen_mul1_w64k3$(EXEEXT) \
#	tune_gen_mul1_w64k4$(EXEEXT) \
#	tune_gen_mul1_w64k5$(EXEEXT) \
#	tune_gen_mul1_w64k6$(EXEEXT)
#am__append_4 = gen_mul1_w64k2.c \
#	gen_mul1_w64k3.c gen_mul1_w64k4.c \
#	gen_mul1_w64k5.c gen_mul1_w64k6.c
#am__append_5 = tune_mul2t$(EXEEXT) \
#	tune_mul2t2$(EXEEXT)
am__append_6 = tune_mul4t$(EXEEXT) \
	tune_mul3t$(EXEEXT)
#am__append_7 = tune_mul1cl$(EXEEXT) \
#	tune_mul2cl$(EXEEXT) \
#	tune_mul2cl2$(EXEEXT) \
#	tune_mul3cl$(EXEEXT) \
#	tune_mul4clk$(EXEEXT) \
#	tune_mul5clk_c$(EXEEXT) \
#	tune_mul5k3$(EXEEXT) \
#	tune_mul6clk2$(EXEEXT) \
#	tune_mul7cl$(EXEEXT) \
#	tune_mul7k3$(EXEEXT) \
#	tune_mul9k3$(EXEEXT) \
#	tune_mul9clk2$(EXEEXT) \
#	tune_mul9cl$(EXEEXT)
subdir = src
DIST_COMMON = README $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in TODO
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/libtool.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/gf2x/gf2x-config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
libtiming_la_LIBADD =
am_libtiming_la_OBJECTS = timing.lo
libtiming_la_OBJECTS = $(am_libtiming_la_OBJECTS)
libtuneup_s1_la_LIBADD =
nodist_libtuneup_s1_la_OBJECTS = libtuneup_s1_la-tuneup_1.lo
libtuneup_s1_la_OBJECTS = $(nodist_libtuneup_s1_la_OBJECTS)
libtuneup_s2_la_LIBADD =
nodist_libtuneup_s2_la_OBJECTS = libtuneup_s2_la-tuneup_2.lo
libtuneup_s2_la_OBJECTS = $(nodist_libtuneup_s2_la_OBJECTS)
libtuneup_s3_la_LIBADD =
nodist_libtuneup_s3_la_OBJECTS = libtuneup_s3_la-tuneup_3.lo
libtuneup_s3_la_OBJECTS = $(nodist_libtuneup_s3_la_OBJECTS)
libtuneup_s4_la_LIBADD =
nodist_libtuneup_s4_la_OBJECTS = libtuneup_s4_la-tuneup_4.lo
libtuneup_s4_la_OBJECTS = $(nodist_libtuneup_s4_la_OBJECTS)
libtuneup_s5_la_LIBADD =
nodist_libtuneup_s5_la_OBJECTS = libtuneup_s5_la-tuneup_5.lo
libtuneup_s5_la_OBJECTS = $(nodist_libtuneup_s5_la_OBJECTS)
libtuneup_s6_la_LIBADD =
nodist_libtuneup_s6_la_OBJECTS = libtuneup_s6_la-tuneup_6.lo
libtuneup_s6_la_OBJECTS = $(nodist_libtuneup_s6_la_OBJECTS)
libtuneup_s7_la_LIBADD =
nodist_libtuneup_s7_la_OBJECTS = libtuneup_s7_la-tuneup_7.lo
libtuneup_s7_la_OBJECTS = $(nodist_libtuneup_s7_la_OBJECTS)
libtuneup_s8_la_LIBADD =
nodist_libtuneup_s8_la_OBJECTS = libtuneup_s8_la-tuneup_8.lo
libtuneup_s8_la_OBJECTS = $(nodist_libtuneup_s8_la_OBJECTS)
libtuneup_s9_la_LIBADD =
nodist_libtuneup_s9_la_OBJECTS = libtuneup_s9_la-tuneup_9.lo
libtuneup_s9_la_OBJECTS = $(nodist_libtuneup_s9_la_OBJECTS)
am_gen_bb_mul_code_OBJECTS = gen_bb_mul_code.$(OBJEXT)
gen_bb_mul_code_OBJECTS = $(am_gen_bb_mul_code_OBJECTS)
gen_bb_mul_code_LDADD = $(LDADD)
nodist_tune_gen_mul1_w32k2_OBJECTS = tune_gen_mul1_w32k2-gen_mul1_w32k2.$(OBJEXT)
tune_gen_mul1_w32k2_OBJECTS = $(nodist_tune_gen_mul1_w32k2_OBJECTS)
tune_gen_mul1_w32k2_DEPENDENCIES =  \
	libtuneup-s1.la libtiming.la \
	../libgf2x.la
nodist_tune_gen_mul1_w32k3_OBJECTS = tune_gen_mul1_w32k3-gen_mul1_w32k3.$(OBJEXT)
tune_gen_mul1_w32k3_OBJECTS = $(nodist_tune_gen_mul1_w32k3_OBJECTS)
tune_gen_mul1_w32k3_DEPENDENCIES =  \
	libtuneup-s1.la libtiming.la \
	../libgf2x.la
nodist_tune_gen_mul1_w32k4_OBJECTS = tune_gen_mul1_w32k4-gen_mul1_w32k4.$(OBJEXT)
tune_gen_mul1_w32k4_OBJECTS = $(nodist_tune_gen_mul1_w32k4_OBJECTS)
tune_gen_mul1_w32k4_DEPENDENCIES =  \
	libtuneup-s1.la libtiming.la \
	../libgf2x.la
nodist_tune_gen_mul1_w32k5_OBJECTS = tune_gen_mul1_w32k5-gen_mul1_w32k5.$(OBJEXT)
tune_gen_mul1_w32k5_OBJECTS = $(nodist_tune_gen_mul1_w32k5_OBJECTS)
tune_gen_mul1_w32k5_DEPENDENCIES =  \
	libtuneup-s1.la libtiming.la \
	../libgf2x.la
nodist_tune_gen_mul1_w32k6_OBJECTS = tune_gen_mul1_w32k6-gen_mul1_w32k6.$(OBJEXT)
tune_gen_mul1_w32k6_OBJECTS = $(nodist_tune_gen_mul1_w32k6_OBJECTS)
tune_gen_mul1_w32k6_DEPENDENCIES =  \
	libtuneup-s1.la libtiming.la \
	../libgf2x.la
#nodist_tune_gen_mul1_w64k2_OBJECTS = tune_gen_mul1_w64k2-gen_mul1_w64k2.$(OBJEXT)
tune_gen_mul1_w64k2_OBJECTS = $(nodist_tune_gen_mul1_w64k2_OBJECTS)
#tune_gen_mul1_w64k2_DEPENDENCIES =  \
#	libtuneup-s1.la libtiming.la \
#	../libgf2x.la
#nodist_tune_gen_mul1_w64k3_OBJECTS = tune_gen_mul1_w64k3-gen_mul1_w64k3.$(OBJEXT)
tune_gen_mul1_w64k3_OBJECTS = $(nodist_tune_gen_mul1_w64k3_OBJECTS)
#tune_gen_mul1_w64k3_DEPENDENCIES =  \
#	libtuneup-s1.la libtiming.la \
#	../libgf2x.la
#nodist_tune_gen_mul1_w64k4_OBJECTS = tune_gen_mul1_w64k4-gen_mul1_w64k4.$(OBJEXT)
tune_gen_mul1_w64k4_OBJECTS = $(nodist_tune_gen_mul1_w64k4_OBJECTS)
#tune_gen_mul1_w64k4_DEPENDENCIES =  \
#	libtuneup-s1.la libtiming.la \
#	../libgf2x.la
#nodist_tune_gen_mul1_w64k5_OBJECTS = tune_gen_mul1_w64k5-gen_mul1_w64k5.$(OBJEXT)
tune_gen_mul1_w64k5_OBJECTS = $(nodist_tune_gen_mul1_w64k5_OBJECTS)
#tune_gen_mul1_w64k5_DEPENDENCIES =  \
#	libtuneup-s1.la libtiming.la \
#	../libgf2x.la
#nodist_tune_gen_mul1_w64k6_OBJECTS = tune_gen_mul1_w64k6-gen_mul1_w64k6.$(OBJEXT)
tune_gen_mul1_w64k6_OBJECTS = $(nodist_tune_gen_mul1_w64k6_OBJECTS)
#tune_gen_mul1_w64k6_DEPENDENCIES =  \
#	libtuneup-s1.la libtiming.la \
#	../libgf2x.la
am__tune_mul1cl_SOURCES_DIST = mul1cl.c
#am_tune_mul1cl_OBJECTS =  \
#	tune_mul1cl-mul1cl.$(OBJEXT)
nodist_tune_mul1cl_OBJECTS =
tune_mul1cl_OBJECTS = $(am_tune_mul1cl_OBJECTS) \
	$(nodist_tune_mul1cl_OBJECTS)
#tune_mul1cl_DEPENDENCIES =  \
#	libtuneup-s1.la libtiming.la \
#	../libgf2x.la
am__tune_mul2cl_SOURCES_DIST = mul2cl.c
#am_tune_mul2cl_OBJECTS =  \
#	tune_mul2cl-mul2cl.$(OBJEXT)
nodist_tune_mul2cl_OBJECTS =
tune_mul2cl_OBJECTS = $(am_tune_mul2cl_OBJECTS) \
	$(nodist_tune_mul2cl_OBJECTS)
#tune_mul2cl_DEPENDENCIES =  \
#	libtuneup-s2.la libtiming.la \
#	../libgf2x.la
am__tune_mul2cl2_SOURCES_DIST = mul2cl2.c
#am_tune_mul2cl2_OBJECTS =  \
#	tune_mul2cl2-mul2cl2.$(OBJEXT)
nodist_tune_mul2cl2_OBJECTS =
tune_mul2cl2_OBJECTS = $(am_tune_mul2cl2_OBJECTS) \
	$(nodist_tune_mul2cl2_OBJECTS)
#tune_mul2cl2_DEPENDENCIES =  \
#	libtuneup-s2.la libtiming.la \
#	../libgf2x.la
am_tune_mul2k_OBJECTS = tune_mul2k-mul2k.$(OBJEXT)
nodist_tune_mul2k_OBJECTS =
tune_mul2k_OBJECTS = $(am_tune_mul2k_OBJECTS) \
	$(nodist_tune_mul2k_OBJECTS)
tune_mul2k_DEPENDENCIES = libtuneup-s2.la libtiming.la ../libgf2x.la
am__tune_mul2t_SOURCES_DIST = mul2t.c
#am_tune_mul2t_OBJECTS = tune_mul2t-mul2t.$(OBJEXT)
nodist_tune_mul2t_OBJECTS =
tune_mul2t_OBJECTS = $(am_tune_mul2t_OBJECTS) \
	$(nodist_tune_mul2t_OBJECTS)
#tune_mul2t_DEPENDENCIES = libtuneup-s2.la \
#	libtiming.la \
#	../libgf2x.la
am__tune_mul2t2_SOURCES_DIST = mul2t2.c
#am_tune_mul2t2_OBJECTS = tune_mul2t2-mul2t2.$(OBJEXT)
nodist_tune_mul2t2_OBJECTS =
tune_mul2t2_OBJECTS = $(am_tune_mul2t2_OBJECTS) \
	$(nodist_tune_mul2t2_OBJECTS)
#tune_mul2t2_DEPENDENCIES = libtuneup-s2.la \
#	libtiming.la \
#	../libgf2x.la
am__tune_mul3cl_SOURCES_DIST = mul3cl.c
#am_tune_mul3cl_OBJECTS =  \
#	tune_mul3cl-mul3cl.$(OBJEXT)
nodist_tune_mul3cl_OBJECTS =
tune_mul3cl_OBJECTS = $(am_tune_mul3cl_OBJECTS) \
	$(nodist_tune_mul3cl_OBJECTS)
#tune_mul3cl_DEPENDENCIES =  \
#	libtuneup-s3.la libtiming.la \
#	../libgf2x.la
am_tune_mul3k_OBJECTS = tune_mul3k-mul3k.$(OBJEXT)
nodist_tune_mul3k_OBJECTS =
tune_mul3k_OBJECTS = $(am_tune_mul3k_OBJECTS) \
	$(nodist_tune_mul3k_OBJECTS)
tune_mul3k_DEPENDENCIES = libtuneup-s3.la libtiming.la ../libgf2x.la
am_tune_mul3k2_OBJECTS = tune_mul3k2-mul3k2.$(OBJEXT)
nodist_tune_mul3k2_OBJECTS =
tune_mul3k2_OBJECTS = $(am_tune_mul3k2_OBJECTS) \
	$(nodist_tune_mul3k2_OBJECTS)
tune_mul3k2_DEPENDENCIES = libtuneup-s3.la libtiming.la ../libgf2x.la
am__tune_mul3t_SOURCES_DIST = mul3t.c
am_tune_mul3t_OBJECTS = tune_mul3t-mul3t.$(OBJEXT)
nodist_tune_mul3t_OBJECTS =
tune_mul3t_OBJECTS = $(am_tune_mul3t_OBJECTS) \
	$(nodist_tune_mul3t_OBJECTS)
tune_mul3t_DEPENDENCIES = libtuneup-s3.la \
	libtiming.la \
	../libgf2x.la
am__tune_mul4clk_SOURCES_DIST = mul4clk.c
#am_tune_mul4clk_OBJECTS =  \
#	tune_mul4clk-mul4clk.$(OBJEXT)
nodist_tune_mul4clk_OBJECTS =
tune_mul4clk_OBJECTS = $(am_tune_mul4clk_OBJECTS) \
	$(nodist_tune_mul4clk_OBJECTS)
#tune_mul4clk_DEPENDENCIES =  \
#	libtuneup-s4.la libtiming.la \
#	../libgf2x.la
am_tune_mul4k_OBJECTS = tune_mul4k-mul4k.$(OBJEXT)
nodist_tune_mul4k_OBJECTS =
tune_mul4k_OBJECTS = $(am_tune_mul4k_OBJECTS) \
	$(nodist_tune_mul4k_OBJECTS)
tune_mul4k_DEPENDENCIES = libtuneup-s4.la libtiming.la ../libgf2x.la
am__tune_mul4t_SOURCES_DIST = mul4t.c
am_tune_mul4t_OBJECTS = tune_mul4t-mul4t.$(OBJEXT)
nodist_tune_mul4t_OBJECTS =
tune_mul4t_OBJECTS = $(am_tune_mul4t_OBJECTS) \
	$(nodist_tune_mul4t_OBJECTS)
tune_mul4t_DEPENDENCIES = libtuneup-s4.la \
	libtiming.la \
	../libgf2x.la
am__tune_mul5clk_c_SOURCES_DIST = mul5clk_c.c
#am_tune_mul5clk_c_OBJECTS = tune_mul5clk_c-mul5clk_c.$(OBJEXT)
nodist_tune_mul5clk_c_OBJECTS =
tune_mul5clk_c_OBJECTS = $(am_tune_mul5clk_c_OBJECTS) \
	$(nodist_tune_mul5clk_c_OBJECTS)
#tune_mul5clk_c_DEPENDENCIES =  \
#	libtuneup-s5.la libtiming.la \
#	../libgf2x.la
am__tune_mul5k3_SOURCES_DIST = mul5k3.c
#am_tune_mul5k3_OBJECTS =  \
#	tune_mul5k3-mul5k3.$(OBJEXT)
nodist_tune_mul5k3_OBJECTS =
tune_mul5k3_OBJECTS = $(am_tune_mul5k3_OBJECTS) \
	$(nodist_tune_mul5k3_OBJECTS)
#tune_mul5k3_DEPENDENCIES =  \
#	libtuneup-s5.la libtiming.la \
#	../libgf2x.la
am_tune_mul5k_a_OBJECTS = tune_mul5k_a-mul5k_a.$(OBJEXT)
nodist_tune_mul5k_a_OBJECTS =
tune_mul5k_a_OBJECTS = $(am_tune_mul5k_a_OBJECTS) \
	$(nodist_tune_mul5k_a_OBJECTS)
tune_mul5k_a_DEPENDENCIES = libtuneup-s5.la libtiming.la ../libgf2x.la
am_tune_mul5k_b_OBJECTS = tune_mul5k_b-mul5k_b.$(OBJEXT)
nodist_tune_mul5k_b_OBJECTS =
tune_mul5k_b_OBJECTS = $(am_tune_mul5k_b_OBJECTS) \
	$(nodist_tune_mul5k_b_OBJECTS)
tune_mul5k_b_DEPENDENCIES = libtuneup-s5.la libtiming.la ../libgf2x.la
am_tune_mul5k_c_OBJECTS = tune_mul5k_c-mul5k_c.$(OBJEXT)
nodist_tune_mul5k_c_OBJECTS =
tune_mul5k_c_OBJECTS = $(am_tune_mul5k_c_OBJECTS) \
	$(nodist_tune_mul5k_c_OBJECTS)
tune_mul5k_c_DEPENDENCIES = libtuneup-s5.la libtiming.la ../libgf2x.la
am_tune_mul5k_d_OBJECTS = tune_mul5k_d-mul5k_d.$(OBJEXT)
nodist_tune_mul5k_d_OBJECTS =
tune_mul5k_d_OBJECTS = $(am_tune_mul5k_d_OBJECTS) \
	$(nodist_tune_mul5k_d_OBJECTS)
tune_mul5k_d_DEPENDENCIES = libtuneup-s5.la libtiming.la ../libgf2x.la
am__tune_mul6clk2_SOURCES_DIST = mul6clk2.c
#am_tune_mul6clk2_OBJECTS =  \
#	tune_mul6clk2-mul6clk2.$(OBJEXT)
nodist_tune_mul6clk2_OBJECTS =
tune_mul6clk2_OBJECTS = $(am_tune_mul6clk2_OBJECTS) \
	$(nodist_tune_mul6clk2_OBJECTS)
#tune_mul6clk2_DEPENDENCIES =  \
#	libtuneup-s6.la libtiming.la \
#	../libgf2x.la
am_tune_mul6k_a_OBJECTS = tune_mul6k_a-mul6k_a.$(OBJEXT)
nodist_tune_mul6k_a_OBJECTS =
tune_mul6k_a_OBJECTS = $(am_tune_mul6k_a_OBJECTS) \
	$(nodist_tune_mul6k_a_OBJECTS)
tune_mul6k_a_DEPENDENCIES = libtuneup-s6.la libtiming.la ../libgf2x.la
am_tune_mul6k_b_OBJECTS = tune_mul6k_b-mul6k_b.$(OBJEXT)
nodist_tune_mul6k_b_OBJECTS =
tune_mul6k_b_OBJECTS = $(am_tune_mul6k_b_OBJECTS) \
	$(nodist_tune_mul6k_b_OBJECTS)
tune_mul6k_b_DEPENDENCIES = libtuneup-s6.la libtiming.la ../libgf2x.la
am_tune_mul6k_c_OBJECTS = tune_mul6k_c-mul6k_c.$(OBJEXT)
nodist_tune_mul6k_c_OBJECTS =
tune_mul6k_c_OBJECTS = $(am_tune_mul6k_c_OBJECTS) \
	$(nodist_tune_mul6k_c_OBJECTS)
tune_mul6k_c_DEPENDENCIES = libtuneup-s6.la libtiming.la ../libgf2x.la
am__tune_mul7cl_SOURCES_DIST = mul7cl.c
#am_tune_mul7cl_OBJECTS =  \
#	tune_mul7cl-mul7cl.$(OBJEXT)
nodist_tune_mul7cl_OBJECTS =
tune_mul7cl_OBJECTS = $(am_tune_mul7cl_OBJECTS) \
	$(nodist_tune_mul7cl_OBJECTS)
#tune_mul7cl_DEPENDENCIES =  \
#	libtuneup-s7.la libtiming.la \
#	../libgf2x.la
am_tune_mul7k_OBJECTS = tune_mul7k-mul7k.$(OBJEXT)
nodist_tune_mul7k_OBJECTS =
tune_mul7k_OBJECTS = $(am_tune_mul7k_OBJECTS) \
	$(nodist_tune_mul7k_OBJECTS)
tune_mul7k_DEPENDENCIES = libtuneup-s7.la libtiming.la ../libgf2x.la
am__tune_mul7k3_SOURCES_DIST = mul7k3.c
#am_tune_mul7k3_OBJECTS =  \
#	tune_mul7k3-mul7k3.$(OBJEXT)
nodist_tune_mul7k3_OBJECTS =
tune_mul7k3_OBJECTS = $(am_tune_mul7k3_OBJECTS) \
	$(nodist_tune_mul7k3_OBJECTS)
#tune_mul7k3_DEPENDENCIES =  \
#	libtuneup-s7.la libtiming.la \
#	../libgf2x.la
am_tune_mul8k_OBJECTS = tune_mul8k-mul8k.$(OBJEXT)
nodist_tune_mul8k_OBJECTS =
tune_mul8k_OBJECTS = $(am_tune_mul8k_OBJECTS) \
	$(nodist_tune_mul8k_OBJECTS)
tune_mul8k_DEPENDENCIES = libtuneup-s8.la libtiming.la ../libgf2x.la
am__tune_mul9cl_SOURCES_DIST = mul9cl.c
#am_tune_mul9cl_OBJECTS =  \
#	tune_mul9cl-mul9cl.$(OBJEXT)
nodist_tune_mul9cl_OBJECTS =
tune_mul9cl_OBJECTS = $(am_tune_mul9cl_OBJECTS) \
	$(nodist_tune_mul9cl_OBJECTS)
#tune_mul9cl_DEPENDENCIES =  \
#	libtuneup-s9.la libtiming.la \
#	../libgf2x.la
am__tune_mul9clk2_SOURCES_DIST = mul9clk2.c
#am_tune_mul9clk2_OBJECTS =  \
#	tune_mul9clk2-mul9clk2.$(OBJEXT)
nodist_tune_mul9clk2_OBJECTS =
tune_mul9clk2_OBJECTS = $(am_tune_mul9clk2_OBJECTS) \
	$(nodist_tune_mul9clk2_OBJECTS)
#tune_mul9clk2_DEPENDENCIES =  \
#	libtuneup-s9.la libtiming.la \
#	../libgf2x.la
am_tune_mul9k_OBJECTS = tune_mul9k-mul9k.$(OBJEXT)
nodist_tune_mul9k_OBJECTS =
tune_mul9k_OBJECTS = $(am_tune_mul9k_OBJECTS) \
	$(nodist_tune_mul9k_OBJECTS)
tune_mul9k_DEPENDENCIES = libtuneup-s9.la libtiming.la ../libgf2x.la
am_tune_mul9k2_OBJECTS = tune_mul9k2-mul9k2.$(OBJEXT)
nodist_tune_mul9k2_OBJECTS =
tune_mul9k2_OBJECTS = $(am_tune_mul9k2_OBJECTS) \
	$(nodist_tune_mul9k2_OBJECTS)
tune_mul9k2_DEPENDENCIES = libtuneup-s9.la libtiming.la ../libgf2x.la
am__tune_mul9k3_SOURCES_DIST = mul9k3.c
#am_tune_mul9k3_OBJECTS =  \
#	tune_mul9k3-mul9k3.$(OBJEXT)
nodist_tune_mul9k3_OBJECTS =
tune_mul9k3_OBJECTS = $(am_tune_mul9k3_OBJECTS) \
	$(nodist_tune_mul9k3_OBJECTS)
#tune_mul9k3_DEPENDENCIES =  \
#	libtuneup-s9.la libtiming.la \
#	../libgf2x.la
am_tunefft_OBJECTS = tunefft.$(OBJEXT) tuning-common.$(OBJEXT)
tunefft_OBJECTS = $(am_tunefft_OBJECTS)
tunefft_DEPENDENCIES = libtiming.la ../libgf2x.la
am_tunetoom_OBJECTS = tunetoom.$(OBJEXT) tuning-common.$(OBJEXT)
tunetoom_OBJECTS = $(am_tunetoom_OBJECTS)
tunetoom_DEPENDENCIES = libtiming.la ../libgf2x.la
am_update_thresholds_OBJECTS = update-thresholds.$(OBJEXT) \
	replace.$(OBJEXT)
update_thresholds_OBJECTS = $(am_update_thresholds_OBJECTS)
update_thresholds_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)/gf2x
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libtiming_la_SOURCES) $(nodist_libtuneup_s1_la_SOURCES) \
	$(nodist_libtuneup_s2_la_SOURCES) \
	$(nodist_libtuneup_s3_la_SOURCES) \
	$(nodist_libtuneup_s4_la_SOURCES) \
	$(nodist_libtuneup_s5_la_SOURCES) \
	$(nodist_libtuneup_s6_la_SOURCES) \
	$(nodist_libtuneup_s7_la_SOURCES) \
	$(nodist_libtuneup_s8_la_SOURCES) \
	$(nodist_libtuneup_s9_la_SOURCES) $(gen_bb_mul_code_SOURCES) \
	$(nodist_tune_gen_mul1_w32k2_SOURCES) \
	$(nodist_tune_gen_mul1_w32k3_SOURCES) \
	$(nodist_tune_gen_mul1_w32k4_SOURCES) \
	$(nodist_tune_gen_mul1_w32k5_SOURCES) \
	$(nodist_tune_gen_mul1_w32k6_SOURCES) \
	$(nodist_tune_gen_mul1_w64k2_SOURCES) \
	$(nodist_tune_gen_mul1_w64k3_SOURCES) \
	$(nodist_tune_gen_mul1_w64k4_SOURCES) \
	$(nodist_tune_gen_mul1_w64k5_SOURCES) \
	$(nodist_tune_gen_mul1_w64k6_SOURCES) $(tune_mul1cl_SOURCES) \
	$(nodist_tune_mul1cl_SOURCES) $(tune_mul2cl_SOURCES) \
	$(nodist_tune_mul2cl_SOURCES) $(tune_mul2cl2_SOURCES) \
	$(nodist_tune_mul2cl2_SOURCES) $(tune_mul2k_SOURCES) \
	$(nodist_tune_mul2k_SOURCES) $(tune_mul2t_SOURCES) \
	$(nodist_tune_mul2t_SOURCES) $(tune_mul2t2_SOURCES) \
	$(nodist_tune_mul2t2_SOURCES) $(tune_mul3cl_SOURCES) \
	$(nodist_tune_mul3cl_SOURCES) $(tune_mul3k_SOURCES) \
	$(nodist_tune_mul3k_SOURCES) $(tune_mul3k2_SOURCES) \
	$(nodist_tune_mul3k2_SOURCES) $(tune_mul3t_SOURCES) \
	$(nodist_tune_mul3t_SOURCES) $(tune_mul4clk_SOURCES) \
	$(nodist_tune_mul4clk_SOURCES) $(tune_mul4k_SOURCES) \
	$(nodist_tune_mul4k_SOURCES) $(tune_mul4t_SOURCES) \
	$(nodist_tune_mul4t_SOURCES) $(tune_mul5clk_c_SOURCES) \
	$(nodist_tune_mul5clk_c_SOURCES) $(tune_mul5k3_SOURCES) \
	$(nodist_tune_mul5k3_SOURCES) $(tune_mul5k_a_SOURCES) \
	$(nodist_tune_mul5k_a_SOURCES) $(tune_mul5k_b_SOURCES) \
	$(nodist_tune_mul5k_b_SOURCES) $(tune_mul5k_c_SOURCES) \
	$(nodist_tune_mul5k_c_SOURCES) $(tune_mul5k_d_SOURCES) \
	$(nodist_tune_mul5k_d_SOURCES) $(tune_mul6clk2_SOURCES) \
	$(nodist_tune_mul6clk2_SOURCES) $(tune_mul6k_a_SOURCES) \
	$(nodist_tune_mul6k_a_SOURCES) $(tune_mul6k_b_SOURCES) \
	$(nodist_tune_mul6k_b_SOURCES) $(tune_mul6k_c_SOURCES) \
	$(nodist_tune_mul6k_c_SOURCES) $(tune_mul7cl_SOURCES) \
	$(nodist_tune_mul7cl_SOURCES) $(tune_mul7k_SOURCES) \
	$(nodist_tune_mul7k_SOURCES) $(tune_mul7k3_SOURCES) \
	$(nodist_tune_mul7k3_SOURCES) $(tune_mul8k_SOURCES) \
	$(nodist_tune_mul8k_SOURCES) $(tune_mul9cl_SOURCES) \
	$(nodist_tune_mul9cl_SOURCES) $(tune_mul9clk2_SOURCES) \
	$(nodist_tune_mul9clk2_SOURCES) $(tune_mul9k_SOURCES) \
	$(nodist_tune_mul9k_SOURCES) $(tune_mul9k2_SOURCES) \
	$(nodist_tune_mul9k2_SOURCES) $(tune_mul9k3_SOURCES) \
	$(nodist_tune_mul9k3_SOURCES) $(tunefft_SOURCES) \
	$(tunetoom_SOURCES) $(update_thresholds_SOURCES)
DIST_SOURCES = $(libtiming_la_SOURCES) $(gen_bb_mul_code_SOURCES) \
	$(am__tune_mul1cl_SOURCES_DIST) \
	$(am__tune_mul2cl_SOURCES_DIST) \
	$(am__tune_mul2cl2_SOURCES_DIST) $(tune_mul2k_SOURCES) \
	$(am__tune_mul2t_SOURCES_DIST) $(am__tune_mul2t2_SOURCES_DIST) \
	$(am__tune_mul3cl_SOURCES_DIST) $(tune_mul3k_SOURCES) \
	$(tune_mul3k2_SOURCES) $(am__tune_mul3t_SOURCES_DIST) \
	$(am__tune_mul4clk_SOURCES_DIST) $(tune_mul4k_SOURCES) \
	$(am__tune_mul4t_SOURCES_DIST) \
	$(am__tune_mul5clk_c_SOURCES_DIST) \
	$(am__tune_mul5k3_SOURCES_DIST) $(tune_mul5k_a_SOURCES) \
	$(tune_mul5k_b_SOURCES) $(tune_mul5k_c_SOURCES) \
	$(tune_mul5k_d_SOURCES) $(am__tune_mul6clk2_SOURCES_DIST) \
	$(tune_mul6k_a_SOURCES) $(tune_mul6k_b_SOURCES) \
	$(tune_mul6k_c_SOURCES) $(am__tune_mul7cl_SOURCES_DIST) \
	$(tune_mul7k_SOURCES) $(am__tune_mul7k3_SOURCES_DIST) \
	$(tune_mul8k_SOURCES) $(am__tune_mul9cl_SOURCES_DIST) \
	$(am__tune_mul9clk2_SOURCES_DIST) $(tune_mul9k_SOURCES) \
	$(tune_mul9k2_SOURCES) $(am__tune_mul9k3_SOURCES_DIST) \
	$(tunefft_SOURCES) $(tunetoom_SOURCES) \
	$(update_thresholds_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /cygdrive/c/users/eli-u/downloads/gf2x-1.0/config/missing --run aclocal-1.11
AMTAR = ${SHELL} /cygdrive/c/users/eli-u/downloads/gf2x-1.0/config/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /cygdrive/c/users/eli-u/downloads/gf2x-1.0/config/missing --run autoconf
AUTOHEADER = ${SHELL} /cygdrive/c/users/eli-u/downloads/gf2x-1.0/config/missing --run autoheader
AUTOMAKE = ${SHELL} /cygdrive/c/users/eli-u/downloads/gf2x-1.0/config/missing --run automake-1.11
AWK = gawk
CC = gcc -std=gnu99
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O4 -Wall -W -msse2
CPP = gcc -E
CPPFLAGS =  -msse2
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -Wall -W
CYGPATH_W = cygpath -w
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = .exe
FGREP = /usr/bin/grep -F
GF2X_WORDSIZE = 32
GREP = /usr/bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/i686-pc-cygwin/bin/ld.exe
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /cygdrive/c/users/eli-u/downloads/gf2x-1.0/config/missing --run makeinfo
MKDIR_P = /usr/bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = gf2x
PACKAGE_BUGREPORT = 
PACKAGE_NAME = gf2x
PACKAGE_STRING = gf2x 1.0
PACKAGE_TARNAME = gf2x
PACKAGE_URL = 
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 1.0
abs_builddir = /cygdrive/c/users/eli-u/downloads/gf2x-1.0/src
abs_srcdir = /cygdrive/c/users/eli-u/downloads/gf2x-1.0/src
abs_top_builddir = /cygdrive/c/users/eli-u/downloads/gf2x-1.0
abs_top_srcdir = /cygdrive/c/users/eli-u/downloads/gf2x-1.0
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-cygwin
build_alias = 
build_cpu = i686
build_os = cygwin
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
gf2x_lib_version = 1:0:0
host = i686-pc-cygwin
host_alias = 
host_cpu = i686
host_os = cygwin
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /cygdrive/c/users/eli-u/downloads/gf2x-1.0/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /usr/bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = i686-pc-cygwin
target_alias = 
target_cpu = i686
target_os = cygwin
target_vendor = pc
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..

# This impacts the storage class of the functions in the inlines files.
AM_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
EXTRA_DIST = README.adding_code generate-test-list.pl mul3k3.c \
	tuneup_pre.c tuning_undef_wrapper.h tuning_undefs_pre.h \
	tune-lowlevel.pl

# We've got a lot of per-target cfiles here, but it's rather silly to
# have automake produce separate .o files for the files which fo _not_
# change in this regard. So we resort to having lots of silly libraries,
# as a workaround.
EXTRA_LTLIBRARIES = libtiming.la libtuneup-s1.la libtuneup-s2.la \
	libtuneup-s3.la libtuneup-s4.la libtuneup-s5.la \
	libtuneup-s6.la libtuneup-s7.la libtuneup-s8.la \
	libtuneup-s9.la
libtiming_la_SOURCES = timing.c
LOWLEVEL = $(am__append_1) $(am__append_3) tune_mul2k$(EXEEXT) \
	tune_mul3k$(EXEEXT) tune_mul3k2$(EXEEXT) tune_mul4k$(EXEEXT) \
	tune_mul5k_a$(EXEEXT) tune_mul5k_b$(EXEEXT) \
	tune_mul5k_c$(EXEEXT) tune_mul5k_d$(EXEEXT) \
	tune_mul6k_a$(EXEEXT) tune_mul6k_b$(EXEEXT) \
	tune_mul6k_c$(EXEEXT) tune_mul7k$(EXEEXT) tune_mul8k$(EXEEXT) \
	tune_mul9k$(EXEEXT) tune_mul9k2$(EXEEXT) $(am__append_5) \
	$(am__append_6) $(am__append_7)
CLEANFILES = tuning_undefs_1.h tuning_undefs_2.h tuning_undefs_3.h \
	tuning_undefs_4.h tuning_undefs_5.h tuning_undefs_6.h \
	tuning_undefs_7.h tuning_undefs_8.h tuning_undefs_9.h \
	$(EXTRA_PROGRAMS) $(EXTRA_LTLIBRARIES) tunetoom.res \
	tunefft.res $(BUILT_SOURCES)
DISTCLEANFILES = tuning_undefs_1.h tuning_undefs_2.h tuning_undefs_3.h \
	tuning_undefs_4.h tuning_undefs_5.h tuning_undefs_6.h \
	tuning_undefs_7.h tuning_undefs_8.h tuning_undefs_9.h
BUILT_SOURCES = tuneup_1.c tuning_undefs_1.h tuneup_2.c \
	tuning_undefs_2.h tuneup_3.c tuning_undefs_3.h tuneup_4.c \
	tuning_undefs_4.h tuneup_5.c tuning_undefs_5.h tuneup_6.c \
	tuning_undefs_6.h tuneup_7.c tuning_undefs_7.h tuneup_8.c \
	tuning_undefs_8.h tuneup_9.c tuning_undefs_9.h $(am__append_2) \
	$(am__append_4)

# Autotools already use sed, so normally sed is not an extraordinary
# difficult dependency.

# -- end generated code --

######################################################################

######################################################################

######################################################################
EXTRA_PROGRAMS = gen_bb_mul_code$(EXEEXT) $(LOWLEVEL) \
	update-thresholds$(EXEEXT) tunetoom$(EXEEXT) tunefft$(EXEEXT)
gen_bb_mul_code_SOURCES = gen_bb_mul_code.c
nodist_libtuneup_s1_la_SOURCES = tuneup_1.c tuning_undefs_1.h
libtuneup_s1_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
nodist_libtuneup_s2_la_SOURCES = tuneup_2.c tuning_undefs_2.h
libtuneup_s2_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
nodist_libtuneup_s3_la_SOURCES = tuneup_3.c tuning_undefs_3.h
libtuneup_s3_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
nodist_libtuneup_s4_la_SOURCES = tuneup_4.c tuning_undefs_4.h
libtuneup_s4_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
nodist_libtuneup_s5_la_SOURCES = tuneup_5.c tuning_undefs_5.h
libtuneup_s5_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
nodist_libtuneup_s6_la_SOURCES = tuneup_6.c tuning_undefs_6.h
libtuneup_s6_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
nodist_libtuneup_s7_la_SOURCES = tuneup_7.c tuning_undefs_7.h
libtuneup_s7_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
nodist_libtuneup_s8_la_SOURCES = tuneup_8.c tuning_undefs_8.h
libtuneup_s8_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
nodist_libtuneup_s9_la_SOURCES = tuneup_9.c tuning_undefs_9.h
libtuneup_s9_la_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)
tune_gen_mul1_w32k2_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
nodist_tune_gen_mul1_w32k2_SOURCES = gen_mul1_w32k2.c tuning_undefs_1.h
tune_gen_mul1_w32k2_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
tune_gen_mul1_w32k3_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
nodist_tune_gen_mul1_w32k3_SOURCES = gen_mul1_w32k3.c tuning_undefs_1.h
tune_gen_mul1_w32k3_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
tune_gen_mul1_w32k4_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
nodist_tune_gen_mul1_w32k4_SOURCES = gen_mul1_w32k4.c tuning_undefs_1.h
tune_gen_mul1_w32k4_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
tune_gen_mul1_w32k5_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
nodist_tune_gen_mul1_w32k5_SOURCES = gen_mul1_w32k5.c tuning_undefs_1.h
tune_gen_mul1_w32k5_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
tune_gen_mul1_w32k6_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
nodist_tune_gen_mul1_w32k6_SOURCES = gen_mul1_w32k6.c tuning_undefs_1.h
tune_gen_mul1_w32k6_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
#tune_gen_mul1_w64k2_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
#nodist_tune_gen_mul1_w64k2_SOURCES = gen_mul1_w64k2.c tuning_undefs_1.h
#tune_gen_mul1_w64k2_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
#tune_gen_mul1_w64k3_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
#nodist_tune_gen_mul1_w64k3_SOURCES = gen_mul1_w64k3.c tuning_undefs_1.h
#tune_gen_mul1_w64k3_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
#tune_gen_mul1_w64k4_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
#nodist_tune_gen_mul1_w64k4_SOURCES = gen_mul1_w64k4.c tuning_undefs_1.h
#tune_gen_mul1_w64k4_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
#tune_gen_mul1_w64k5_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
#nodist_tune_gen_mul1_w64k5_SOURCES = gen_mul1_w64k5.c tuning_undefs_1.h
#tune_gen_mul1_w64k5_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
#tune_gen_mul1_w64k6_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
#nodist_tune_gen_mul1_w64k6_SOURCES = gen_mul1_w64k6.c tuning_undefs_1.h
#tune_gen_mul1_w64k6_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
tune_mul2k_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=2
tune_mul2k_SOURCES = mul2k.c
nodist_tune_mul2k_SOURCES = tuning_undefs_2.h
tune_mul2k_LDADD = libtuneup-s2.la libtiming.la ../libgf2x.la
tune_mul3k_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=3
tune_mul3k_SOURCES = mul3k.c
nodist_tune_mul3k_SOURCES = tuning_undefs_3.h
tune_mul3k_LDADD = libtuneup-s3.la libtiming.la ../libgf2x.la
tune_mul3k2_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=3
tune_mul3k2_SOURCES = mul3k2.c
nodist_tune_mul3k2_SOURCES = tuning_undefs_3.h
tune_mul3k2_LDADD = libtuneup-s3.la libtiming.la ../libgf2x.la
tune_mul4k_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=4
tune_mul4k_SOURCES = mul4k.c
nodist_tune_mul4k_SOURCES = tuning_undefs_4.h
tune_mul4k_LDADD = libtuneup-s4.la libtiming.la ../libgf2x.la
tune_mul5k_a_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=5
tune_mul5k_a_SOURCES = mul5k_a.c
nodist_tune_mul5k_a_SOURCES = tuning_undefs_5.h
tune_mul5k_a_LDADD = libtuneup-s5.la libtiming.la ../libgf2x.la
tune_mul5k_b_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=5
tune_mul5k_b_SOURCES = mul5k_b.c
nodist_tune_mul5k_b_SOURCES = tuning_undefs_5.h
tune_mul5k_b_LDADD = libtuneup-s5.la libtiming.la ../libgf2x.la
tune_mul5k_c_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=5
tune_mul5k_c_SOURCES = mul5k_c.c
nodist_tune_mul5k_c_SOURCES = tuning_undefs_5.h
tune_mul5k_c_LDADD = libtuneup-s5.la libtiming.la ../libgf2x.la
tune_mul5k_d_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=5
tune_mul5k_d_SOURCES = mul5k_d.c
nodist_tune_mul5k_d_SOURCES = tuning_undefs_5.h
tune_mul5k_d_LDADD = libtuneup-s5.la libtiming.la ../libgf2x.la
tune_mul6k_a_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=6
tune_mul6k_a_SOURCES = mul6k_a.c
nodist_tune_mul6k_a_SOURCES = tuning_undefs_6.h
tune_mul6k_a_LDADD = libtuneup-s6.la libtiming.la ../libgf2x.la
tune_mul6k_b_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=6
tune_mul6k_b_SOURCES = mul6k_b.c
nodist_tune_mul6k_b_SOURCES = tuning_undefs_6.h
tune_mul6k_b_LDADD = libtuneup-s6.la libtiming.la ../libgf2x.la
tune_mul6k_c_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=6
tune_mul6k_c_SOURCES = mul6k_c.c
nodist_tune_mul6k_c_SOURCES = tuning_undefs_6.h
tune_mul6k_c_LDADD = libtuneup-s6.la libtiming.la ../libgf2x.la
tune_mul7k_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=7
tune_mul7k_SOURCES = mul7k.c
nodist_tune_mul7k_SOURCES = tuning_undefs_7.h
tune_mul7k_LDADD = libtuneup-s7.la libtiming.la ../libgf2x.la
tune_mul8k_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=8
tune_mul8k_SOURCES = mul8k.c
nodist_tune_mul8k_SOURCES = tuning_undefs_8.h
tune_mul8k_LDADD = libtuneup-s8.la libtiming.la ../libgf2x.la
tune_mul9k_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=9
tune_mul9k_SOURCES = mul9k.c
nodist_tune_mul9k_SOURCES = tuning_undefs_9.h
tune_mul9k_LDADD = libtuneup-s9.la libtiming.la ../libgf2x.la
tune_mul9k2_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=9
tune_mul9k2_SOURCES = mul9k2.c
nodist_tune_mul9k2_SOURCES = tuning_undefs_9.h
tune_mul9k2_LDADD = libtuneup-s9.la libtiming.la ../libgf2x.la
#tune_mul2t_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=2
#tune_mul2t_SOURCES = mul2t.c
#nodist_tune_mul2t_SOURCES = tuning_undefs_2.h
#tune_mul2t_LDADD = libtuneup-s2.la libtiming.la ../libgf2x.la
#tune_mul2t2_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=2
#tune_mul2t2_SOURCES = mul2t2.c
#nodist_tune_mul2t2_SOURCES = tuning_undefs_2.h
#tune_mul2t2_LDADD = libtuneup-s2.la libtiming.la ../libgf2x.la
tune_mul4t_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=4
tune_mul4t_SOURCES = mul4t.c
nodist_tune_mul4t_SOURCES = tuning_undefs_4.h
tune_mul4t_LDADD = libtuneup-s4.la libtiming.la ../libgf2x.la
tune_mul3t_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=3
tune_mul3t_SOURCES = mul3t.c
nodist_tune_mul3t_SOURCES = tuning_undefs_3.h
tune_mul3t_LDADD = libtuneup-s3.la libtiming.la ../libgf2x.la
#tune_mul1cl_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=1
#tune_mul1cl_SOURCES = mul1cl.c
#nodist_tune_mul1cl_SOURCES = tuning_undefs_1.h
#tune_mul1cl_LDADD = libtuneup-s1.la libtiming.la ../libgf2x.la
#tune_mul2cl_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=2
#tune_mul2cl_SOURCES = mul2cl.c
#nodist_tune_mul2cl_SOURCES = tuning_undefs_2.h
#tune_mul2cl_LDADD = libtuneup-s2.la libtiming.la ../libgf2x.la
#tune_mul2cl2_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=2
#tune_mul2cl2_SOURCES = mul2cl2.c
#nodist_tune_mul2cl2_SOURCES = tuning_undefs_2.h
#tune_mul2cl2_LDADD = libtuneup-s2.la libtiming.la ../libgf2x.la
#tune_mul3cl_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=3
#tune_mul3cl_SOURCES = mul3cl.c
#nodist_tune_mul3cl_SOURCES = tuning_undefs_3.h
#tune_mul3cl_LDADD = libtuneup-s3.la libtiming.la ../libgf2x.la
#tune_mul4clk_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=4
#tune_mul4clk_SOURCES = mul4clk.c
#nodist_tune_mul4clk_SOURCES = tuning_undefs_4.h
#tune_mul4clk_LDADD = libtuneup-s4.la libtiming.la ../libgf2x.la
#tune_mul5clk_c_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=5
#tune_mul5clk_c_SOURCES = mul5clk_c.c
#nodist_tune_mul5clk_c_SOURCES = tuning_undefs_5.h
#tune_mul5clk_c_LDADD = libtuneup-s5.la libtiming.la ../libgf2x.la
#tune_mul5k3_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=5
#tune_mul5k3_SOURCES = mul5k3.c
#nodist_tune_mul5k3_SOURCES = tuning_undefs_5.h
#tune_mul5k3_LDADD = libtuneup-s5.la libtiming.la ../libgf2x.la
#tune_mul6clk2_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=6
#tune_mul6clk2_SOURCES = mul6clk2.c
#nodist_tune_mul6clk2_SOURCES = tuning_undefs_6.h
#tune_mul6clk2_LDADD = libtuneup-s6.la libtiming.la ../libgf2x.la
#tune_mul7cl_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=7
#tune_mul7cl_SOURCES = mul7cl.c
#nodist_tune_mul7cl_SOURCES = tuning_undefs_7.h
#tune_mul7cl_LDADD = libtuneup-s7.la libtiming.la ../libgf2x.la
#tune_mul7k3_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=7
#tune_mul7k3_SOURCES = mul7k3.c
#nodist_tune_mul7k3_SOURCES = tuning_undefs_7.h
#tune_mul7k3_LDADD = libtuneup-s7.la libtiming.la ../libgf2x.la
#tune_mul9k3_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=9
#tune_mul9k3_SOURCES = mul9k3.c
#nodist_tune_mul9k3_SOURCES = tuning_undefs_9.h
#tune_mul9k3_LDADD = libtuneup-s9.la libtiming.la ../libgf2x.la
#tune_mul9clk2_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=9
#tune_mul9clk2_SOURCES = mul9clk2.c
#nodist_tune_mul9clk2_SOURCES = tuning_undefs_9.h
#tune_mul9clk2_LDADD = libtuneup-s9.la libtiming.la ../libgf2x.la
#tune_mul9cl_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -DTUNING=9
#tune_mul9cl_SOURCES = mul9cl.c
#nodist_tune_mul9cl_SOURCES = tuning_undefs_9.h
#tune_mul9cl_LDADD = libtuneup-s9.la libtiming.la ../libgf2x.la

######################################################################
noinst_HEADERS = timing.h tuning-common.h replace.h
update_thresholds_SOURCES = update-thresholds.c replace.c
tunetoom_SOURCES = tunetoom.c tuning-common.c
tunetoom_LDADD = libtiming.la ../libgf2x.la
TOOM_TUNING_LIMIT = 2048
tunefft_SOURCES = tunefft.c tuning-common.c
tunefft_LDADD = libtiming.la ../libgf2x.la
FFT_TUNING_LIMIT = 8000000
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
libtiming.la: $(libtiming_la_OBJECTS) $(libtiming_la_DEPENDENCIES) 
	$(LINK)  $(libtiming_la_OBJECTS) $(libtiming_la_LIBADD) $(LIBS)
libtuneup-s1.la: $(libtuneup_s1_la_OBJECTS) $(libtuneup_s1_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s1_la_OBJECTS) $(libtuneup_s1_la_LIBADD) $(LIBS)
libtuneup-s2.la: $(libtuneup_s2_la_OBJECTS) $(libtuneup_s2_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s2_la_OBJECTS) $(libtuneup_s2_la_LIBADD) $(LIBS)
libtuneup-s3.la: $(libtuneup_s3_la_OBJECTS) $(libtuneup_s3_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s3_la_OBJECTS) $(libtuneup_s3_la_LIBADD) $(LIBS)
libtuneup-s4.la: $(libtuneup_s4_la_OBJECTS) $(libtuneup_s4_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s4_la_OBJECTS) $(libtuneup_s4_la_LIBADD) $(LIBS)
libtuneup-s5.la: $(libtuneup_s5_la_OBJECTS) $(libtuneup_s5_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s5_la_OBJECTS) $(libtuneup_s5_la_LIBADD) $(LIBS)
libtuneup-s6.la: $(libtuneup_s6_la_OBJECTS) $(libtuneup_s6_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s6_la_OBJECTS) $(libtuneup_s6_la_LIBADD) $(LIBS)
libtuneup-s7.la: $(libtuneup_s7_la_OBJECTS) $(libtuneup_s7_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s7_la_OBJECTS) $(libtuneup_s7_la_LIBADD) $(LIBS)
libtuneup-s8.la: $(libtuneup_s8_la_OBJECTS) $(libtuneup_s8_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s8_la_OBJECTS) $(libtuneup_s8_la_LIBADD) $(LIBS)
libtuneup-s9.la: $(libtuneup_s9_la_OBJECTS) $(libtuneup_s9_la_DEPENDENCIES) 
	$(LINK)  $(libtuneup_s9_la_OBJECTS) $(libtuneup_s9_la_LIBADD) $(LIBS)
gen_bb_mul_code$(EXEEXT): $(gen_bb_mul_code_OBJECTS) $(gen_bb_mul_code_DEPENDENCIES) 
	@rm -f gen_bb_mul_code$(EXEEXT)
	$(LINK) $(gen_bb_mul_code_OBJECTS) $(gen_bb_mul_code_LDADD) $(LIBS)
tune_gen_mul1_w32k2$(EXEEXT): $(tune_gen_mul1_w32k2_OBJECTS) $(tune_gen_mul1_w32k2_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w32k2$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w32k2_OBJECTS) $(tune_gen_mul1_w32k2_LDADD) $(LIBS)
tune_gen_mul1_w32k3$(EXEEXT): $(tune_gen_mul1_w32k3_OBJECTS) $(tune_gen_mul1_w32k3_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w32k3$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w32k3_OBJECTS) $(tune_gen_mul1_w32k3_LDADD) $(LIBS)
tune_gen_mul1_w32k4$(EXEEXT): $(tune_gen_mul1_w32k4_OBJECTS) $(tune_gen_mul1_w32k4_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w32k4$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w32k4_OBJECTS) $(tune_gen_mul1_w32k4_LDADD) $(LIBS)
tune_gen_mul1_w32k5$(EXEEXT): $(tune_gen_mul1_w32k5_OBJECTS) $(tune_gen_mul1_w32k5_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w32k5$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w32k5_OBJECTS) $(tune_gen_mul1_w32k5_LDADD) $(LIBS)
tune_gen_mul1_w32k6$(EXEEXT): $(tune_gen_mul1_w32k6_OBJECTS) $(tune_gen_mul1_w32k6_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w32k6$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w32k6_OBJECTS) $(tune_gen_mul1_w32k6_LDADD) $(LIBS)
tune_gen_mul1_w64k2$(EXEEXT): $(tune_gen_mul1_w64k2_OBJECTS) $(tune_gen_mul1_w64k2_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w64k2$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w64k2_OBJECTS) $(tune_gen_mul1_w64k2_LDADD) $(LIBS)
tune_gen_mul1_w64k3$(EXEEXT): $(tune_gen_mul1_w64k3_OBJECTS) $(tune_gen_mul1_w64k3_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w64k3$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w64k3_OBJECTS) $(tune_gen_mul1_w64k3_LDADD) $(LIBS)
tune_gen_mul1_w64k4$(EXEEXT): $(tune_gen_mul1_w64k4_OBJECTS) $(tune_gen_mul1_w64k4_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w64k4$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w64k4_OBJECTS) $(tune_gen_mul1_w64k4_LDADD) $(LIBS)
tune_gen_mul1_w64k5$(EXEEXT): $(tune_gen_mul1_w64k5_OBJECTS) $(tune_gen_mul1_w64k5_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w64k5$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w64k5_OBJECTS) $(tune_gen_mul1_w64k5_LDADD) $(LIBS)
tune_gen_mul1_w64k6$(EXEEXT): $(tune_gen_mul1_w64k6_OBJECTS) $(tune_gen_mul1_w64k6_DEPENDENCIES) 
	@rm -f tune_gen_mul1_w64k6$(EXEEXT)
	$(LINK) $(tune_gen_mul1_w64k6_OBJECTS) $(tune_gen_mul1_w64k6_LDADD) $(LIBS)
tune_mul1cl$(EXEEXT): $(tune_mul1cl_OBJECTS) $(tune_mul1cl_DEPENDENCIES) 
	@rm -f tune_mul1cl$(EXEEXT)
	$(LINK) $(tune_mul1cl_OBJECTS) $(tune_mul1cl_LDADD) $(LIBS)
tune_mul2cl$(EXEEXT): $(tune_mul2cl_OBJECTS) $(tune_mul2cl_DEPENDENCIES) 
	@rm -f tune_mul2cl$(EXEEXT)
	$(LINK) $(tune_mul2cl_OBJECTS) $(tune_mul2cl_LDADD) $(LIBS)
tune_mul2cl2$(EXEEXT): $(tune_mul2cl2_OBJECTS) $(tune_mul2cl2_DEPENDENCIES) 
	@rm -f tune_mul2cl2$(EXEEXT)
	$(LINK) $(tune_mul2cl2_OBJECTS) $(tune_mul2cl2_LDADD) $(LIBS)
tune_mul2k$(EXEEXT): $(tune_mul2k_OBJECTS) $(tune_mul2k_DEPENDENCIES) 
	@rm -f tune_mul2k$(EXEEXT)
	$(LINK) $(tune_mul2k_OBJECTS) $(tune_mul2k_LDADD) $(LIBS)
tune_mul2t$(EXEEXT): $(tune_mul2t_OBJECTS) $(tune_mul2t_DEPENDENCIES) 
	@rm -f tune_mul2t$(EXEEXT)
	$(LINK) $(tune_mul2t_OBJECTS) $(tune_mul2t_LDADD) $(LIBS)
tune_mul2t2$(EXEEXT): $(tune_mul2t2_OBJECTS) $(tune_mul2t2_DEPENDENCIES) 
	@rm -f tune_mul2t2$(EXEEXT)
	$(LINK) $(tune_mul2t2_OBJECTS) $(tune_mul2t2_LDADD) $(LIBS)
tune_mul3cl$(EXEEXT): $(tune_mul3cl_OBJECTS) $(tune_mul3cl_DEPENDENCIES) 
	@rm -f tune_mul3cl$(EXEEXT)
	$(LINK) $(tune_mul3cl_OBJECTS) $(tune_mul3cl_LDADD) $(LIBS)
tune_mul3k$(EXEEXT): $(tune_mul3k_OBJECTS) $(tune_mul3k_DEPENDENCIES) 
	@rm -f tune_mul3k$(EXEEXT)
	$(LINK) $(tune_mul3k_OBJECTS) $(tune_mul3k_LDADD) $(LIBS)
tune_mul3k2$(EXEEXT): $(tune_mul3k2_OBJECTS) $(tune_mul3k2_DEPENDENCIES) 
	@rm -f tune_mul3k2$(EXEEXT)
	$(LINK) $(tune_mul3k2_OBJECTS) $(tune_mul3k2_LDADD) $(LIBS)
tune_mul3t$(EXEEXT): $(tune_mul3t_OBJECTS) $(tune_mul3t_DEPENDENCIES) 
	@rm -f tune_mul3t$(EXEEXT)
	$(LINK) $(tune_mul3t_OBJECTS) $(tune_mul3t_LDADD) $(LIBS)
tune_mul4clk$(EXEEXT): $(tune_mul4clk_OBJECTS) $(tune_mul4clk_DEPENDENCIES) 
	@rm -f tune_mul4clk$(EXEEXT)
	$(LINK) $(tune_mul4clk_OBJECTS) $(tune_mul4clk_LDADD) $(LIBS)
tune_mul4k$(EXEEXT): $(tune_mul4k_OBJECTS) $(tune_mul4k_DEPENDENCIES) 
	@rm -f tune_mul4k$(EXEEXT)
	$(LINK) $(tune_mul4k_OBJECTS) $(tune_mul4k_LDADD) $(LIBS)
tune_mul4t$(EXEEXT): $(tune_mul4t_OBJECTS) $(tune_mul4t_DEPENDENCIES) 
	@rm -f tune_mul4t$(EXEEXT)
	$(LINK) $(tune_mul4t_OBJECTS) $(tune_mul4t_LDADD) $(LIBS)
tune_mul5clk_c$(EXEEXT): $(tune_mul5clk_c_OBJECTS) $(tune_mul5clk_c_DEPENDENCIES) 
	@rm -f tune_mul5clk_c$(EXEEXT)
	$(LINK) $(tune_mul5clk_c_OBJECTS) $(tune_mul5clk_c_LDADD) $(LIBS)
tune_mul5k3$(EXEEXT): $(tune_mul5k3_OBJECTS) $(tune_mul5k3_DEPENDENCIES) 
	@rm -f tune_mul5k3$(EXEEXT)
	$(LINK) $(tune_mul5k3_OBJECTS) $(tune_mul5k3_LDADD) $(LIBS)
tune_mul5k_a$(EXEEXT): $(tune_mul5k_a_OBJECTS) $(tune_mul5k_a_DEPENDENCIES) 
	@rm -f tune_mul5k_a$(EXEEXT)
	$(LINK) $(tune_mul5k_a_OBJECTS) $(tune_mul5k_a_LDADD) $(LIBS)
tune_mul5k_b$(EXEEXT): $(tune_mul5k_b_OBJECTS) $(tune_mul5k_b_DEPENDENCIES) 
	@rm -f tune_mul5k_b$(EXEEXT)
	$(LINK) $(tune_mul5k_b_OBJECTS) $(tune_mul5k_b_LDADD) $(LIBS)
tune_mul5k_c$(EXEEXT): $(tune_mul5k_c_OBJECTS) $(tune_mul5k_c_DEPENDENCIES) 
	@rm -f tune_mul5k_c$(EXEEXT)
	$(LINK) $(tune_mul5k_c_OBJECTS) $(tune_mul5k_c_LDADD) $(LIBS)
tune_mul5k_d$(EXEEXT): $(tune_mul5k_d_OBJECTS) $(tune_mul5k_d_DEPENDENCIES) 
	@rm -f tune_mul5k_d$(EXEEXT)
	$(LINK) $(tune_mul5k_d_OBJECTS) $(tune_mul5k_d_LDADD) $(LIBS)
tune_mul6clk2$(EXEEXT): $(tune_mul6clk2_OBJECTS) $(tune_mul6clk2_DEPENDENCIES) 
	@rm -f tune_mul6clk2$(EXEEXT)
	$(LINK) $(tune_mul6clk2_OBJECTS) $(tune_mul6clk2_LDADD) $(LIBS)
tune_mul6k_a$(EXEEXT): $(tune_mul6k_a_OBJECTS) $(tune_mul6k_a_DEPENDENCIES) 
	@rm -f tune_mul6k_a$(EXEEXT)
	$(LINK) $(tune_mul6k_a_OBJECTS) $(tune_mul6k_a_LDADD) $(LIBS)
tune_mul6k_b$(EXEEXT): $(tune_mul6k_b_OBJECTS) $(tune_mul6k_b_DEPENDENCIES) 
	@rm -f tune_mul6k_b$(EXEEXT)
	$(LINK) $(tune_mul6k_b_OBJECTS) $(tune_mul6k_b_LDADD) $(LIBS)
tune_mul6k_c$(EXEEXT): $(tune_mul6k_c_OBJECTS) $(tune_mul6k_c_DEPENDENCIES) 
	@rm -f tune_mul6k_c$(EXEEXT)
	$(LINK) $(tune_mul6k_c_OBJECTS) $(tune_mul6k_c_LDADD) $(LIBS)
tune_mul7cl$(EXEEXT): $(tune_mul7cl_OBJECTS) $(tune_mul7cl_DEPENDENCIES) 
	@rm -f tune_mul7cl$(EXEEXT)
	$(LINK) $(tune_mul7cl_OBJECTS) $(tune_mul7cl_LDADD) $(LIBS)
tune_mul7k$(EXEEXT): $(tune_mul7k_OBJECTS) $(tune_mul7k_DEPENDENCIES) 
	@rm -f tune_mul7k$(EXEEXT)
	$(LINK) $(tune_mul7k_OBJECTS) $(tune_mul7k_LDADD) $(LIBS)
tune_mul7k3$(EXEEXT): $(tune_mul7k3_OBJECTS) $(tune_mul7k3_DEPENDENCIES) 
	@rm -f tune_mul7k3$(EXEEXT)
	$(LINK) $(tune_mul7k3_OBJECTS) $(tune_mul7k3_LDADD) $(LIBS)
tune_mul8k$(EXEEXT): $(tune_mul8k_OBJECTS) $(tune_mul8k_DEPENDENCIES) 
	@rm -f tune_mul8k$(EXEEXT)
	$(LINK) $(tune_mul8k_OBJECTS) $(tune_mul8k_LDADD) $(LIBS)
tune_mul9cl$(EXEEXT): $(tune_mul9cl_OBJECTS) $(tune_mul9cl_DEPENDENCIES) 
	@rm -f tune_mul9cl$(EXEEXT)
	$(LINK) $(tune_mul9cl_OBJECTS) $(tune_mul9cl_LDADD) $(LIBS)
tune_mul9clk2$(EXEEXT): $(tune_mul9clk2_OBJECTS) $(tune_mul9clk2_DEPENDENCIES) 
	@rm -f tune_mul9clk2$(EXEEXT)
	$(LINK) $(tune_mul9clk2_OBJECTS) $(tune_mul9clk2_LDADD) $(LIBS)
tune_mul9k$(EXEEXT): $(tune_mul9k_OBJECTS) $(tune_mul9k_DEPENDENCIES) 
	@rm -f tune_mul9k$(EXEEXT)
	$(LINK) $(tune_mul9k_OBJECTS) $(tune_mul9k_LDADD) $(LIBS)
tune_mul9k2$(EXEEXT): $(tune_mul9k2_OBJECTS) $(tune_mul9k2_DEPENDENCIES) 
	@rm -f tune_mul9k2$(EXEEXT)
	$(LINK) $(tune_mul9k2_OBJECTS) $(tune_mul9k2_LDADD) $(LIBS)
tune_mul9k3$(EXEEXT): $(tune_mul9k3_OBJECTS) $(tune_mul9k3_DEPENDENCIES) 
	@rm -f tune_mul9k3$(EXEEXT)
	$(LINK) $(tune_mul9k3_OBJECTS) $(tune_mul9k3_LDADD) $(LIBS)
tunefft$(EXEEXT): $(tunefft_OBJECTS) $(tunefft_DEPENDENCIES) 
	@rm -f tunefft$(EXEEXT)
	$(LINK) $(tunefft_OBJECTS) $(tunefft_LDADD) $(LIBS)
tunetoom$(EXEEXT): $(tunetoom_OBJECTS) $(tunetoom_DEPENDENCIES) 
	@rm -f tunetoom$(EXEEXT)
	$(LINK) $(tunetoom_OBJECTS) $(tunetoom_LDADD) $(LIBS)
update-thresholds$(EXEEXT): $(update_thresholds_OBJECTS) $(update_thresholds_DEPENDENCIES) 
	@rm -f update-thresholds$(EXEEXT)
	$(LINK) $(update_thresholds_OBJECTS) $(update_thresholds_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/gen_bb_mul_code.Po
include ./$(DEPDIR)/libtuneup_s1_la-tuneup_1.Plo
include ./$(DEPDIR)/libtuneup_s2_la-tuneup_2.Plo
include ./$(DEPDIR)/libtuneup_s3_la-tuneup_3.Plo
include ./$(DEPDIR)/libtuneup_s4_la-tuneup_4.Plo
include ./$(DEPDIR)/libtuneup_s5_la-tuneup_5.Plo
include ./$(DEPDIR)/libtuneup_s6_la-tuneup_6.Plo
include ./$(DEPDIR)/libtuneup_s7_la-tuneup_7.Plo
include ./$(DEPDIR)/libtuneup_s8_la-tuneup_8.Plo
include ./$(DEPDIR)/libtuneup_s9_la-tuneup_9.Plo
include ./$(DEPDIR)/replace.Po
include ./$(DEPDIR)/timing.Plo
include ./$(DEPDIR)/tune_gen_mul1_w32k2-gen_mul1_w32k2.Po
include ./$(DEPDIR)/tune_gen_mul1_w32k3-gen_mul1_w32k3.Po
include ./$(DEPDIR)/tune_gen_mul1_w32k4-gen_mul1_w32k4.Po
include ./$(DEPDIR)/tune_gen_mul1_w32k5-gen_mul1_w32k5.Po
include ./$(DEPDIR)/tune_gen_mul1_w32k6-gen_mul1_w32k6.Po
include ./$(DEPDIR)/tune_gen_mul1_w64k2-gen_mul1_w64k2.Po
include ./$(DEPDIR)/tune_gen_mul1_w64k3-gen_mul1_w64k3.Po
include ./$(DEPDIR)/tune_gen_mul1_w64k4-gen_mul1_w64k4.Po
include ./$(DEPDIR)/tune_gen_mul1_w64k5-gen_mul1_w64k5.Po
include ./$(DEPDIR)/tune_gen_mul1_w64k6-gen_mul1_w64k6.Po
include ./$(DEPDIR)/tune_mul1cl-mul1cl.Po
include ./$(DEPDIR)/tune_mul2cl-mul2cl.Po
include ./$(DEPDIR)/tune_mul2cl2-mul2cl2.Po
include ./$(DEPDIR)/tune_mul2k-mul2k.Po
include ./$(DEPDIR)/tune_mul2t-mul2t.Po
include ./$(DEPDIR)/tune_mul2t2-mul2t2.Po
include ./$(DEPDIR)/tune_mul3cl-mul3cl.Po
include ./$(DEPDIR)/tune_mul3k-mul3k.Po
include ./$(DEPDIR)/tune_mul3k2-mul3k2.Po
include ./$(DEPDIR)/tune_mul3t-mul3t.Po
include ./$(DEPDIR)/tune_mul4clk-mul4clk.Po
include ./$(DEPDIR)/tune_mul4k-mul4k.Po
include ./$(DEPDIR)/tune_mul4t-mul4t.Po
include ./$(DEPDIR)/tune_mul5clk_c-mul5clk_c.Po
include ./$(DEPDIR)/tune_mul5k3-mul5k3.Po
include ./$(DEPDIR)/tune_mul5k_a-mul5k_a.Po
include ./$(DEPDIR)/tune_mul5k_b-mul5k_b.Po
include ./$(DEPDIR)/tune_mul5k_c-mul5k_c.Po
include ./$(DEPDIR)/tune_mul5k_d-mul5k_d.Po
include ./$(DEPDIR)/tune_mul6clk2-mul6clk2.Po
include ./$(DEPDIR)/tune_mul6k_a-mul6k_a.Po
include ./$(DEPDIR)/tune_mul6k_b-mul6k_b.Po
include ./$(DEPDIR)/tune_mul6k_c-mul6k_c.Po
include ./$(DEPDIR)/tune_mul7cl-mul7cl.Po
include ./$(DEPDIR)/tune_mul7k-mul7k.Po
include ./$(DEPDIR)/tune_mul7k3-mul7k3.Po
include ./$(DEPDIR)/tune_mul8k-mul8k.Po
include ./$(DEPDIR)/tune_mul9cl-mul9cl.Po
include ./$(DEPDIR)/tune_mul9clk2-mul9clk2.Po
include ./$(DEPDIR)/tune_mul9k-mul9k.Po
include ./$(DEPDIR)/tune_mul9k2-mul9k2.Po
include ./$(DEPDIR)/tune_mul9k3-mul9k3.Po
include ./$(DEPDIR)/tunefft.Po
include ./$(DEPDIR)/tunetoom.Po
include ./$(DEPDIR)/tuning-common.Po
include ./$(DEPDIR)/update-thresholds.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

libtuneup_s1_la-tuneup_1.lo: tuneup_1.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s1_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s1_la-tuneup_1.lo -MD -MP -MF $(DEPDIR)/libtuneup_s1_la-tuneup_1.Tpo -c -o libtuneup_s1_la-tuneup_1.lo `test -f 'tuneup_1.c' || echo '$(srcdir)/'`tuneup_1.c
	$(am__mv) $(DEPDIR)/libtuneup_s1_la-tuneup_1.Tpo $(DEPDIR)/libtuneup_s1_la-tuneup_1.Plo
#	source='tuneup_1.c' object='libtuneup_s1_la-tuneup_1.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s1_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s1_la-tuneup_1.lo `test -f 'tuneup_1.c' || echo '$(srcdir)/'`tuneup_1.c

libtuneup_s2_la-tuneup_2.lo: tuneup_2.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s2_la-tuneup_2.lo -MD -MP -MF $(DEPDIR)/libtuneup_s2_la-tuneup_2.Tpo -c -o libtuneup_s2_la-tuneup_2.lo `test -f 'tuneup_2.c' || echo '$(srcdir)/'`tuneup_2.c
	$(am__mv) $(DEPDIR)/libtuneup_s2_la-tuneup_2.Tpo $(DEPDIR)/libtuneup_s2_la-tuneup_2.Plo
#	source='tuneup_2.c' object='libtuneup_s2_la-tuneup_2.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s2_la-tuneup_2.lo `test -f 'tuneup_2.c' || echo '$(srcdir)/'`tuneup_2.c

libtuneup_s3_la-tuneup_3.lo: tuneup_3.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s3_la-tuneup_3.lo -MD -MP -MF $(DEPDIR)/libtuneup_s3_la-tuneup_3.Tpo -c -o libtuneup_s3_la-tuneup_3.lo `test -f 'tuneup_3.c' || echo '$(srcdir)/'`tuneup_3.c
	$(am__mv) $(DEPDIR)/libtuneup_s3_la-tuneup_3.Tpo $(DEPDIR)/libtuneup_s3_la-tuneup_3.Plo
#	source='tuneup_3.c' object='libtuneup_s3_la-tuneup_3.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s3_la-tuneup_3.lo `test -f 'tuneup_3.c' || echo '$(srcdir)/'`tuneup_3.c

libtuneup_s4_la-tuneup_4.lo: tuneup_4.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s4_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s4_la-tuneup_4.lo -MD -MP -MF $(DEPDIR)/libtuneup_s4_la-tuneup_4.Tpo -c -o libtuneup_s4_la-tuneup_4.lo `test -f 'tuneup_4.c' || echo '$(srcdir)/'`tuneup_4.c
	$(am__mv) $(DEPDIR)/libtuneup_s4_la-tuneup_4.Tpo $(DEPDIR)/libtuneup_s4_la-tuneup_4.Plo
#	source='tuneup_4.c' object='libtuneup_s4_la-tuneup_4.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s4_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s4_la-tuneup_4.lo `test -f 'tuneup_4.c' || echo '$(srcdir)/'`tuneup_4.c

libtuneup_s5_la-tuneup_5.lo: tuneup_5.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s5_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s5_la-tuneup_5.lo -MD -MP -MF $(DEPDIR)/libtuneup_s5_la-tuneup_5.Tpo -c -o libtuneup_s5_la-tuneup_5.lo `test -f 'tuneup_5.c' || echo '$(srcdir)/'`tuneup_5.c
	$(am__mv) $(DEPDIR)/libtuneup_s5_la-tuneup_5.Tpo $(DEPDIR)/libtuneup_s5_la-tuneup_5.Plo
#	source='tuneup_5.c' object='libtuneup_s5_la-tuneup_5.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s5_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s5_la-tuneup_5.lo `test -f 'tuneup_5.c' || echo '$(srcdir)/'`tuneup_5.c

libtuneup_s6_la-tuneup_6.lo: tuneup_6.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s6_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s6_la-tuneup_6.lo -MD -MP -MF $(DEPDIR)/libtuneup_s6_la-tuneup_6.Tpo -c -o libtuneup_s6_la-tuneup_6.lo `test -f 'tuneup_6.c' || echo '$(srcdir)/'`tuneup_6.c
	$(am__mv) $(DEPDIR)/libtuneup_s6_la-tuneup_6.Tpo $(DEPDIR)/libtuneup_s6_la-tuneup_6.Plo
#	source='tuneup_6.c' object='libtuneup_s6_la-tuneup_6.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s6_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s6_la-tuneup_6.lo `test -f 'tuneup_6.c' || echo '$(srcdir)/'`tuneup_6.c

libtuneup_s7_la-tuneup_7.lo: tuneup_7.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s7_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s7_la-tuneup_7.lo -MD -MP -MF $(DEPDIR)/libtuneup_s7_la-tuneup_7.Tpo -c -o libtuneup_s7_la-tuneup_7.lo `test -f 'tuneup_7.c' || echo '$(srcdir)/'`tuneup_7.c
	$(am__mv) $(DEPDIR)/libtuneup_s7_la-tuneup_7.Tpo $(DEPDIR)/libtuneup_s7_la-tuneup_7.Plo
#	source='tuneup_7.c' object='libtuneup_s7_la-tuneup_7.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s7_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s7_la-tuneup_7.lo `test -f 'tuneup_7.c' || echo '$(srcdir)/'`tuneup_7.c

libtuneup_s8_la-tuneup_8.lo: tuneup_8.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s8_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s8_la-tuneup_8.lo -MD -MP -MF $(DEPDIR)/libtuneup_s8_la-tuneup_8.Tpo -c -o libtuneup_s8_la-tuneup_8.lo `test -f 'tuneup_8.c' || echo '$(srcdir)/'`tuneup_8.c
	$(am__mv) $(DEPDIR)/libtuneup_s8_la-tuneup_8.Tpo $(DEPDIR)/libtuneup_s8_la-tuneup_8.Plo
#	source='tuneup_8.c' object='libtuneup_s8_la-tuneup_8.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s8_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s8_la-tuneup_8.lo `test -f 'tuneup_8.c' || echo '$(srcdir)/'`tuneup_8.c

libtuneup_s9_la-tuneup_9.lo: tuneup_9.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s9_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libtuneup_s9_la-tuneup_9.lo -MD -MP -MF $(DEPDIR)/libtuneup_s9_la-tuneup_9.Tpo -c -o libtuneup_s9_la-tuneup_9.lo `test -f 'tuneup_9.c' || echo '$(srcdir)/'`tuneup_9.c
	$(am__mv) $(DEPDIR)/libtuneup_s9_la-tuneup_9.Tpo $(DEPDIR)/libtuneup_s9_la-tuneup_9.Plo
#	source='tuneup_9.c' object='libtuneup_s9_la-tuneup_9.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libtuneup_s9_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libtuneup_s9_la-tuneup_9.lo `test -f 'tuneup_9.c' || echo '$(srcdir)/'`tuneup_9.c

tune_gen_mul1_w32k2-gen_mul1_w32k2.o: gen_mul1_w32k2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k2-gen_mul1_w32k2.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k2-gen_mul1_w32k2.Tpo -c -o tune_gen_mul1_w32k2-gen_mul1_w32k2.o `test -f 'gen_mul1_w32k2.c' || echo '$(srcdir)/'`gen_mul1_w32k2.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k2-gen_mul1_w32k2.Tpo $(DEPDIR)/tune_gen_mul1_w32k2-gen_mul1_w32k2.Po
#	source='gen_mul1_w32k2.c' object='tune_gen_mul1_w32k2-gen_mul1_w32k2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k2-gen_mul1_w32k2.o `test -f 'gen_mul1_w32k2.c' || echo '$(srcdir)/'`gen_mul1_w32k2.c

tune_gen_mul1_w32k2-gen_mul1_w32k2.obj: gen_mul1_w32k2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k2-gen_mul1_w32k2.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k2-gen_mul1_w32k2.Tpo -c -o tune_gen_mul1_w32k2-gen_mul1_w32k2.obj `if test -f 'gen_mul1_w32k2.c'; then $(CYGPATH_W) 'gen_mul1_w32k2.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k2.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k2-gen_mul1_w32k2.Tpo $(DEPDIR)/tune_gen_mul1_w32k2-gen_mul1_w32k2.Po
#	source='gen_mul1_w32k2.c' object='tune_gen_mul1_w32k2-gen_mul1_w32k2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k2-gen_mul1_w32k2.obj `if test -f 'gen_mul1_w32k2.c'; then $(CYGPATH_W) 'gen_mul1_w32k2.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k2.c'; fi`

tune_gen_mul1_w32k3-gen_mul1_w32k3.o: gen_mul1_w32k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k3-gen_mul1_w32k3.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k3-gen_mul1_w32k3.Tpo -c -o tune_gen_mul1_w32k3-gen_mul1_w32k3.o `test -f 'gen_mul1_w32k3.c' || echo '$(srcdir)/'`gen_mul1_w32k3.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k3-gen_mul1_w32k3.Tpo $(DEPDIR)/tune_gen_mul1_w32k3-gen_mul1_w32k3.Po
#	source='gen_mul1_w32k3.c' object='tune_gen_mul1_w32k3-gen_mul1_w32k3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k3-gen_mul1_w32k3.o `test -f 'gen_mul1_w32k3.c' || echo '$(srcdir)/'`gen_mul1_w32k3.c

tune_gen_mul1_w32k3-gen_mul1_w32k3.obj: gen_mul1_w32k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k3-gen_mul1_w32k3.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k3-gen_mul1_w32k3.Tpo -c -o tune_gen_mul1_w32k3-gen_mul1_w32k3.obj `if test -f 'gen_mul1_w32k3.c'; then $(CYGPATH_W) 'gen_mul1_w32k3.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k3.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k3-gen_mul1_w32k3.Tpo $(DEPDIR)/tune_gen_mul1_w32k3-gen_mul1_w32k3.Po
#	source='gen_mul1_w32k3.c' object='tune_gen_mul1_w32k3-gen_mul1_w32k3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k3-gen_mul1_w32k3.obj `if test -f 'gen_mul1_w32k3.c'; then $(CYGPATH_W) 'gen_mul1_w32k3.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k3.c'; fi`

tune_gen_mul1_w32k4-gen_mul1_w32k4.o: gen_mul1_w32k4.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k4_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k4-gen_mul1_w32k4.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k4-gen_mul1_w32k4.Tpo -c -o tune_gen_mul1_w32k4-gen_mul1_w32k4.o `test -f 'gen_mul1_w32k4.c' || echo '$(srcdir)/'`gen_mul1_w32k4.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k4-gen_mul1_w32k4.Tpo $(DEPDIR)/tune_gen_mul1_w32k4-gen_mul1_w32k4.Po
#	source='gen_mul1_w32k4.c' object='tune_gen_mul1_w32k4-gen_mul1_w32k4.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k4_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k4-gen_mul1_w32k4.o `test -f 'gen_mul1_w32k4.c' || echo '$(srcdir)/'`gen_mul1_w32k4.c

tune_gen_mul1_w32k4-gen_mul1_w32k4.obj: gen_mul1_w32k4.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k4_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k4-gen_mul1_w32k4.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k4-gen_mul1_w32k4.Tpo -c -o tune_gen_mul1_w32k4-gen_mul1_w32k4.obj `if test -f 'gen_mul1_w32k4.c'; then $(CYGPATH_W) 'gen_mul1_w32k4.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k4.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k4-gen_mul1_w32k4.Tpo $(DEPDIR)/tune_gen_mul1_w32k4-gen_mul1_w32k4.Po
#	source='gen_mul1_w32k4.c' object='tune_gen_mul1_w32k4-gen_mul1_w32k4.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k4_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k4-gen_mul1_w32k4.obj `if test -f 'gen_mul1_w32k4.c'; then $(CYGPATH_W) 'gen_mul1_w32k4.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k4.c'; fi`

tune_gen_mul1_w32k5-gen_mul1_w32k5.o: gen_mul1_w32k5.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k5_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k5-gen_mul1_w32k5.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k5-gen_mul1_w32k5.Tpo -c -o tune_gen_mul1_w32k5-gen_mul1_w32k5.o `test -f 'gen_mul1_w32k5.c' || echo '$(srcdir)/'`gen_mul1_w32k5.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k5-gen_mul1_w32k5.Tpo $(DEPDIR)/tune_gen_mul1_w32k5-gen_mul1_w32k5.Po
#	source='gen_mul1_w32k5.c' object='tune_gen_mul1_w32k5-gen_mul1_w32k5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k5_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k5-gen_mul1_w32k5.o `test -f 'gen_mul1_w32k5.c' || echo '$(srcdir)/'`gen_mul1_w32k5.c

tune_gen_mul1_w32k5-gen_mul1_w32k5.obj: gen_mul1_w32k5.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k5_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k5-gen_mul1_w32k5.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k5-gen_mul1_w32k5.Tpo -c -o tune_gen_mul1_w32k5-gen_mul1_w32k5.obj `if test -f 'gen_mul1_w32k5.c'; then $(CYGPATH_W) 'gen_mul1_w32k5.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k5.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k5-gen_mul1_w32k5.Tpo $(DEPDIR)/tune_gen_mul1_w32k5-gen_mul1_w32k5.Po
#	source='gen_mul1_w32k5.c' object='tune_gen_mul1_w32k5-gen_mul1_w32k5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k5_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k5-gen_mul1_w32k5.obj `if test -f 'gen_mul1_w32k5.c'; then $(CYGPATH_W) 'gen_mul1_w32k5.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k5.c'; fi`

tune_gen_mul1_w32k6-gen_mul1_w32k6.o: gen_mul1_w32k6.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k6_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k6-gen_mul1_w32k6.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k6-gen_mul1_w32k6.Tpo -c -o tune_gen_mul1_w32k6-gen_mul1_w32k6.o `test -f 'gen_mul1_w32k6.c' || echo '$(srcdir)/'`gen_mul1_w32k6.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k6-gen_mul1_w32k6.Tpo $(DEPDIR)/tune_gen_mul1_w32k6-gen_mul1_w32k6.Po
#	source='gen_mul1_w32k6.c' object='tune_gen_mul1_w32k6-gen_mul1_w32k6.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k6_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k6-gen_mul1_w32k6.o `test -f 'gen_mul1_w32k6.c' || echo '$(srcdir)/'`gen_mul1_w32k6.c

tune_gen_mul1_w32k6-gen_mul1_w32k6.obj: gen_mul1_w32k6.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k6_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w32k6-gen_mul1_w32k6.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w32k6-gen_mul1_w32k6.Tpo -c -o tune_gen_mul1_w32k6-gen_mul1_w32k6.obj `if test -f 'gen_mul1_w32k6.c'; then $(CYGPATH_W) 'gen_mul1_w32k6.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k6.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w32k6-gen_mul1_w32k6.Tpo $(DEPDIR)/tune_gen_mul1_w32k6-gen_mul1_w32k6.Po
#	source='gen_mul1_w32k6.c' object='tune_gen_mul1_w32k6-gen_mul1_w32k6.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w32k6_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w32k6-gen_mul1_w32k6.obj `if test -f 'gen_mul1_w32k6.c'; then $(CYGPATH_W) 'gen_mul1_w32k6.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w32k6.c'; fi`

tune_gen_mul1_w64k2-gen_mul1_w64k2.o: gen_mul1_w64k2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k2-gen_mul1_w64k2.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k2-gen_mul1_w64k2.Tpo -c -o tune_gen_mul1_w64k2-gen_mul1_w64k2.o `test -f 'gen_mul1_w64k2.c' || echo '$(srcdir)/'`gen_mul1_w64k2.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k2-gen_mul1_w64k2.Tpo $(DEPDIR)/tune_gen_mul1_w64k2-gen_mul1_w64k2.Po
#	source='gen_mul1_w64k2.c' object='tune_gen_mul1_w64k2-gen_mul1_w64k2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k2-gen_mul1_w64k2.o `test -f 'gen_mul1_w64k2.c' || echo '$(srcdir)/'`gen_mul1_w64k2.c

tune_gen_mul1_w64k2-gen_mul1_w64k2.obj: gen_mul1_w64k2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k2-gen_mul1_w64k2.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k2-gen_mul1_w64k2.Tpo -c -o tune_gen_mul1_w64k2-gen_mul1_w64k2.obj `if test -f 'gen_mul1_w64k2.c'; then $(CYGPATH_W) 'gen_mul1_w64k2.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k2.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k2-gen_mul1_w64k2.Tpo $(DEPDIR)/tune_gen_mul1_w64k2-gen_mul1_w64k2.Po
#	source='gen_mul1_w64k2.c' object='tune_gen_mul1_w64k2-gen_mul1_w64k2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k2-gen_mul1_w64k2.obj `if test -f 'gen_mul1_w64k2.c'; then $(CYGPATH_W) 'gen_mul1_w64k2.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k2.c'; fi`

tune_gen_mul1_w64k3-gen_mul1_w64k3.o: gen_mul1_w64k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k3-gen_mul1_w64k3.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k3-gen_mul1_w64k3.Tpo -c -o tune_gen_mul1_w64k3-gen_mul1_w64k3.o `test -f 'gen_mul1_w64k3.c' || echo '$(srcdir)/'`gen_mul1_w64k3.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k3-gen_mul1_w64k3.Tpo $(DEPDIR)/tune_gen_mul1_w64k3-gen_mul1_w64k3.Po
#	source='gen_mul1_w64k3.c' object='tune_gen_mul1_w64k3-gen_mul1_w64k3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k3-gen_mul1_w64k3.o `test -f 'gen_mul1_w64k3.c' || echo '$(srcdir)/'`gen_mul1_w64k3.c

tune_gen_mul1_w64k3-gen_mul1_w64k3.obj: gen_mul1_w64k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k3-gen_mul1_w64k3.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k3-gen_mul1_w64k3.Tpo -c -o tune_gen_mul1_w64k3-gen_mul1_w64k3.obj `if test -f 'gen_mul1_w64k3.c'; then $(CYGPATH_W) 'gen_mul1_w64k3.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k3.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k3-gen_mul1_w64k3.Tpo $(DEPDIR)/tune_gen_mul1_w64k3-gen_mul1_w64k3.Po
#	source='gen_mul1_w64k3.c' object='tune_gen_mul1_w64k3-gen_mul1_w64k3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k3-gen_mul1_w64k3.obj `if test -f 'gen_mul1_w64k3.c'; then $(CYGPATH_W) 'gen_mul1_w64k3.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k3.c'; fi`

tune_gen_mul1_w64k4-gen_mul1_w64k4.o: gen_mul1_w64k4.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k4_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k4-gen_mul1_w64k4.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k4-gen_mul1_w64k4.Tpo -c -o tune_gen_mul1_w64k4-gen_mul1_w64k4.o `test -f 'gen_mul1_w64k4.c' || echo '$(srcdir)/'`gen_mul1_w64k4.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k4-gen_mul1_w64k4.Tpo $(DEPDIR)/tune_gen_mul1_w64k4-gen_mul1_w64k4.Po
#	source='gen_mul1_w64k4.c' object='tune_gen_mul1_w64k4-gen_mul1_w64k4.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k4_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k4-gen_mul1_w64k4.o `test -f 'gen_mul1_w64k4.c' || echo '$(srcdir)/'`gen_mul1_w64k4.c

tune_gen_mul1_w64k4-gen_mul1_w64k4.obj: gen_mul1_w64k4.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k4_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k4-gen_mul1_w64k4.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k4-gen_mul1_w64k4.Tpo -c -o tune_gen_mul1_w64k4-gen_mul1_w64k4.obj `if test -f 'gen_mul1_w64k4.c'; then $(CYGPATH_W) 'gen_mul1_w64k4.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k4.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k4-gen_mul1_w64k4.Tpo $(DEPDIR)/tune_gen_mul1_w64k4-gen_mul1_w64k4.Po
#	source='gen_mul1_w64k4.c' object='tune_gen_mul1_w64k4-gen_mul1_w64k4.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k4_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k4-gen_mul1_w64k4.obj `if test -f 'gen_mul1_w64k4.c'; then $(CYGPATH_W) 'gen_mul1_w64k4.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k4.c'; fi`

tune_gen_mul1_w64k5-gen_mul1_w64k5.o: gen_mul1_w64k5.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k5_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k5-gen_mul1_w64k5.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k5-gen_mul1_w64k5.Tpo -c -o tune_gen_mul1_w64k5-gen_mul1_w64k5.o `test -f 'gen_mul1_w64k5.c' || echo '$(srcdir)/'`gen_mul1_w64k5.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k5-gen_mul1_w64k5.Tpo $(DEPDIR)/tune_gen_mul1_w64k5-gen_mul1_w64k5.Po
#	source='gen_mul1_w64k5.c' object='tune_gen_mul1_w64k5-gen_mul1_w64k5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k5_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k5-gen_mul1_w64k5.o `test -f 'gen_mul1_w64k5.c' || echo '$(srcdir)/'`gen_mul1_w64k5.c

tune_gen_mul1_w64k5-gen_mul1_w64k5.obj: gen_mul1_w64k5.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k5_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k5-gen_mul1_w64k5.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k5-gen_mul1_w64k5.Tpo -c -o tune_gen_mul1_w64k5-gen_mul1_w64k5.obj `if test -f 'gen_mul1_w64k5.c'; then $(CYGPATH_W) 'gen_mul1_w64k5.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k5.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k5-gen_mul1_w64k5.Tpo $(DEPDIR)/tune_gen_mul1_w64k5-gen_mul1_w64k5.Po
#	source='gen_mul1_w64k5.c' object='tune_gen_mul1_w64k5-gen_mul1_w64k5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k5_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k5-gen_mul1_w64k5.obj `if test -f 'gen_mul1_w64k5.c'; then $(CYGPATH_W) 'gen_mul1_w64k5.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k5.c'; fi`

tune_gen_mul1_w64k6-gen_mul1_w64k6.o: gen_mul1_w64k6.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k6_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k6-gen_mul1_w64k6.o -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k6-gen_mul1_w64k6.Tpo -c -o tune_gen_mul1_w64k6-gen_mul1_w64k6.o `test -f 'gen_mul1_w64k6.c' || echo '$(srcdir)/'`gen_mul1_w64k6.c
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k6-gen_mul1_w64k6.Tpo $(DEPDIR)/tune_gen_mul1_w64k6-gen_mul1_w64k6.Po
#	source='gen_mul1_w64k6.c' object='tune_gen_mul1_w64k6-gen_mul1_w64k6.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k6_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k6-gen_mul1_w64k6.o `test -f 'gen_mul1_w64k6.c' || echo '$(srcdir)/'`gen_mul1_w64k6.c

tune_gen_mul1_w64k6-gen_mul1_w64k6.obj: gen_mul1_w64k6.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k6_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_gen_mul1_w64k6-gen_mul1_w64k6.obj -MD -MP -MF $(DEPDIR)/tune_gen_mul1_w64k6-gen_mul1_w64k6.Tpo -c -o tune_gen_mul1_w64k6-gen_mul1_w64k6.obj `if test -f 'gen_mul1_w64k6.c'; then $(CYGPATH_W) 'gen_mul1_w64k6.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k6.c'; fi`
	$(am__mv) $(DEPDIR)/tune_gen_mul1_w64k6-gen_mul1_w64k6.Tpo $(DEPDIR)/tune_gen_mul1_w64k6-gen_mul1_w64k6.Po
#	source='gen_mul1_w64k6.c' object='tune_gen_mul1_w64k6-gen_mul1_w64k6.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_gen_mul1_w64k6_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_gen_mul1_w64k6-gen_mul1_w64k6.obj `if test -f 'gen_mul1_w64k6.c'; then $(CYGPATH_W) 'gen_mul1_w64k6.c'; else $(CYGPATH_W) '$(srcdir)/gen_mul1_w64k6.c'; fi`

tune_mul1cl-mul1cl.o: mul1cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul1cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul1cl-mul1cl.o -MD -MP -MF $(DEPDIR)/tune_mul1cl-mul1cl.Tpo -c -o tune_mul1cl-mul1cl.o `test -f 'mul1cl.c' || echo '$(srcdir)/'`mul1cl.c
	$(am__mv) $(DEPDIR)/tune_mul1cl-mul1cl.Tpo $(DEPDIR)/tune_mul1cl-mul1cl.Po
#	source='mul1cl.c' object='tune_mul1cl-mul1cl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul1cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul1cl-mul1cl.o `test -f 'mul1cl.c' || echo '$(srcdir)/'`mul1cl.c

tune_mul1cl-mul1cl.obj: mul1cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul1cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul1cl-mul1cl.obj -MD -MP -MF $(DEPDIR)/tune_mul1cl-mul1cl.Tpo -c -o tune_mul1cl-mul1cl.obj `if test -f 'mul1cl.c'; then $(CYGPATH_W) 'mul1cl.c'; else $(CYGPATH_W) '$(srcdir)/mul1cl.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul1cl-mul1cl.Tpo $(DEPDIR)/tune_mul1cl-mul1cl.Po
#	source='mul1cl.c' object='tune_mul1cl-mul1cl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul1cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul1cl-mul1cl.obj `if test -f 'mul1cl.c'; then $(CYGPATH_W) 'mul1cl.c'; else $(CYGPATH_W) '$(srcdir)/mul1cl.c'; fi`

tune_mul2cl-mul2cl.o: mul2cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2cl-mul2cl.o -MD -MP -MF $(DEPDIR)/tune_mul2cl-mul2cl.Tpo -c -o tune_mul2cl-mul2cl.o `test -f 'mul2cl.c' || echo '$(srcdir)/'`mul2cl.c
	$(am__mv) $(DEPDIR)/tune_mul2cl-mul2cl.Tpo $(DEPDIR)/tune_mul2cl-mul2cl.Po
#	source='mul2cl.c' object='tune_mul2cl-mul2cl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2cl-mul2cl.o `test -f 'mul2cl.c' || echo '$(srcdir)/'`mul2cl.c

tune_mul2cl-mul2cl.obj: mul2cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2cl-mul2cl.obj -MD -MP -MF $(DEPDIR)/tune_mul2cl-mul2cl.Tpo -c -o tune_mul2cl-mul2cl.obj `if test -f 'mul2cl.c'; then $(CYGPATH_W) 'mul2cl.c'; else $(CYGPATH_W) '$(srcdir)/mul2cl.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul2cl-mul2cl.Tpo $(DEPDIR)/tune_mul2cl-mul2cl.Po
#	source='mul2cl.c' object='tune_mul2cl-mul2cl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2cl-mul2cl.obj `if test -f 'mul2cl.c'; then $(CYGPATH_W) 'mul2cl.c'; else $(CYGPATH_W) '$(srcdir)/mul2cl.c'; fi`

tune_mul2cl2-mul2cl2.o: mul2cl2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2cl2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2cl2-mul2cl2.o -MD -MP -MF $(DEPDIR)/tune_mul2cl2-mul2cl2.Tpo -c -o tune_mul2cl2-mul2cl2.o `test -f 'mul2cl2.c' || echo '$(srcdir)/'`mul2cl2.c
	$(am__mv) $(DEPDIR)/tune_mul2cl2-mul2cl2.Tpo $(DEPDIR)/tune_mul2cl2-mul2cl2.Po
#	source='mul2cl2.c' object='tune_mul2cl2-mul2cl2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2cl2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2cl2-mul2cl2.o `test -f 'mul2cl2.c' || echo '$(srcdir)/'`mul2cl2.c

tune_mul2cl2-mul2cl2.obj: mul2cl2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2cl2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2cl2-mul2cl2.obj -MD -MP -MF $(DEPDIR)/tune_mul2cl2-mul2cl2.Tpo -c -o tune_mul2cl2-mul2cl2.obj `if test -f 'mul2cl2.c'; then $(CYGPATH_W) 'mul2cl2.c'; else $(CYGPATH_W) '$(srcdir)/mul2cl2.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul2cl2-mul2cl2.Tpo $(DEPDIR)/tune_mul2cl2-mul2cl2.Po
#	source='mul2cl2.c' object='tune_mul2cl2-mul2cl2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2cl2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2cl2-mul2cl2.obj `if test -f 'mul2cl2.c'; then $(CYGPATH_W) 'mul2cl2.c'; else $(CYGPATH_W) '$(srcdir)/mul2cl2.c'; fi`

tune_mul2k-mul2k.o: mul2k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2k-mul2k.o -MD -MP -MF $(DEPDIR)/tune_mul2k-mul2k.Tpo -c -o tune_mul2k-mul2k.o `test -f 'mul2k.c' || echo '$(srcdir)/'`mul2k.c
	$(am__mv) $(DEPDIR)/tune_mul2k-mul2k.Tpo $(DEPDIR)/tune_mul2k-mul2k.Po
#	source='mul2k.c' object='tune_mul2k-mul2k.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2k-mul2k.o `test -f 'mul2k.c' || echo '$(srcdir)/'`mul2k.c

tune_mul2k-mul2k.obj: mul2k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2k-mul2k.obj -MD -MP -MF $(DEPDIR)/tune_mul2k-mul2k.Tpo -c -o tune_mul2k-mul2k.obj `if test -f 'mul2k.c'; then $(CYGPATH_W) 'mul2k.c'; else $(CYGPATH_W) '$(srcdir)/mul2k.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul2k-mul2k.Tpo $(DEPDIR)/tune_mul2k-mul2k.Po
#	source='mul2k.c' object='tune_mul2k-mul2k.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2k-mul2k.obj `if test -f 'mul2k.c'; then $(CYGPATH_W) 'mul2k.c'; else $(CYGPATH_W) '$(srcdir)/mul2k.c'; fi`

tune_mul2t-mul2t.o: mul2t.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2t-mul2t.o -MD -MP -MF $(DEPDIR)/tune_mul2t-mul2t.Tpo -c -o tune_mul2t-mul2t.o `test -f 'mul2t.c' || echo '$(srcdir)/'`mul2t.c
	$(am__mv) $(DEPDIR)/tune_mul2t-mul2t.Tpo $(DEPDIR)/tune_mul2t-mul2t.Po
#	source='mul2t.c' object='tune_mul2t-mul2t.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2t-mul2t.o `test -f 'mul2t.c' || echo '$(srcdir)/'`mul2t.c

tune_mul2t-mul2t.obj: mul2t.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2t-mul2t.obj -MD -MP -MF $(DEPDIR)/tune_mul2t-mul2t.Tpo -c -o tune_mul2t-mul2t.obj `if test -f 'mul2t.c'; then $(CYGPATH_W) 'mul2t.c'; else $(CYGPATH_W) '$(srcdir)/mul2t.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul2t-mul2t.Tpo $(DEPDIR)/tune_mul2t-mul2t.Po
#	source='mul2t.c' object='tune_mul2t-mul2t.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2t-mul2t.obj `if test -f 'mul2t.c'; then $(CYGPATH_W) 'mul2t.c'; else $(CYGPATH_W) '$(srcdir)/mul2t.c'; fi`

tune_mul2t2-mul2t2.o: mul2t2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2t2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2t2-mul2t2.o -MD -MP -MF $(DEPDIR)/tune_mul2t2-mul2t2.Tpo -c -o tune_mul2t2-mul2t2.o `test -f 'mul2t2.c' || echo '$(srcdir)/'`mul2t2.c
	$(am__mv) $(DEPDIR)/tune_mul2t2-mul2t2.Tpo $(DEPDIR)/tune_mul2t2-mul2t2.Po
#	source='mul2t2.c' object='tune_mul2t2-mul2t2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2t2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2t2-mul2t2.o `test -f 'mul2t2.c' || echo '$(srcdir)/'`mul2t2.c

tune_mul2t2-mul2t2.obj: mul2t2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2t2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul2t2-mul2t2.obj -MD -MP -MF $(DEPDIR)/tune_mul2t2-mul2t2.Tpo -c -o tune_mul2t2-mul2t2.obj `if test -f 'mul2t2.c'; then $(CYGPATH_W) 'mul2t2.c'; else $(CYGPATH_W) '$(srcdir)/mul2t2.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul2t2-mul2t2.Tpo $(DEPDIR)/tune_mul2t2-mul2t2.Po
#	source='mul2t2.c' object='tune_mul2t2-mul2t2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul2t2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul2t2-mul2t2.obj `if test -f 'mul2t2.c'; then $(CYGPATH_W) 'mul2t2.c'; else $(CYGPATH_W) '$(srcdir)/mul2t2.c'; fi`

tune_mul3cl-mul3cl.o: mul3cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul3cl-mul3cl.o -MD -MP -MF $(DEPDIR)/tune_mul3cl-mul3cl.Tpo -c -o tune_mul3cl-mul3cl.o `test -f 'mul3cl.c' || echo '$(srcdir)/'`mul3cl.c
	$(am__mv) $(DEPDIR)/tune_mul3cl-mul3cl.Tpo $(DEPDIR)/tune_mul3cl-mul3cl.Po
#	source='mul3cl.c' object='tune_mul3cl-mul3cl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul3cl-mul3cl.o `test -f 'mul3cl.c' || echo '$(srcdir)/'`mul3cl.c

tune_mul3cl-mul3cl.obj: mul3cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul3cl-mul3cl.obj -MD -MP -MF $(DEPDIR)/tune_mul3cl-mul3cl.Tpo -c -o tune_mul3cl-mul3cl.obj `if test -f 'mul3cl.c'; then $(CYGPATH_W) 'mul3cl.c'; else $(CYGPATH_W) '$(srcdir)/mul3cl.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul3cl-mul3cl.Tpo $(DEPDIR)/tune_mul3cl-mul3cl.Po
#	source='mul3cl.c' object='tune_mul3cl-mul3cl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul3cl-mul3cl.obj `if test -f 'mul3cl.c'; then $(CYGPATH_W) 'mul3cl.c'; else $(CYGPATH_W) '$(srcdir)/mul3cl.c'; fi`

tune_mul3k-mul3k.o: mul3k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul3k-mul3k.o -MD -MP -MF $(DEPDIR)/tune_mul3k-mul3k.Tpo -c -o tune_mul3k-mul3k.o `test -f 'mul3k.c' || echo '$(srcdir)/'`mul3k.c
	$(am__mv) $(DEPDIR)/tune_mul3k-mul3k.Tpo $(DEPDIR)/tune_mul3k-mul3k.Po
#	source='mul3k.c' object='tune_mul3k-mul3k.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul3k-mul3k.o `test -f 'mul3k.c' || echo '$(srcdir)/'`mul3k.c

tune_mul3k-mul3k.obj: mul3k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul3k-mul3k.obj -MD -MP -MF $(DEPDIR)/tune_mul3k-mul3k.Tpo -c -o tune_mul3k-mul3k.obj `if test -f 'mul3k.c'; then $(CYGPATH_W) 'mul3k.c'; else $(CYGPATH_W) '$(srcdir)/mul3k.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul3k-mul3k.Tpo $(DEPDIR)/tune_mul3k-mul3k.Po
#	source='mul3k.c' object='tune_mul3k-mul3k.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul3k-mul3k.obj `if test -f 'mul3k.c'; then $(CYGPATH_W) 'mul3k.c'; else $(CYGPATH_W) '$(srcdir)/mul3k.c'; fi`

tune_mul3k2-mul3k2.o: mul3k2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul3k2-mul3k2.o -MD -MP -MF $(DEPDIR)/tune_mul3k2-mul3k2.Tpo -c -o tune_mul3k2-mul3k2.o `test -f 'mul3k2.c' || echo '$(srcdir)/'`mul3k2.c
	$(am__mv) $(DEPDIR)/tune_mul3k2-mul3k2.Tpo $(DEPDIR)/tune_mul3k2-mul3k2.Po
#	source='mul3k2.c' object='tune_mul3k2-mul3k2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul3k2-mul3k2.o `test -f 'mul3k2.c' || echo '$(srcdir)/'`mul3k2.c

tune_mul3k2-mul3k2.obj: mul3k2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul3k2-mul3k2.obj -MD -MP -MF $(DEPDIR)/tune_mul3k2-mul3k2.Tpo -c -o tune_mul3k2-mul3k2.obj `if test -f 'mul3k2.c'; then $(CYGPATH_W) 'mul3k2.c'; else $(CYGPATH_W) '$(srcdir)/mul3k2.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul3k2-mul3k2.Tpo $(DEPDIR)/tune_mul3k2-mul3k2.Po
#	source='mul3k2.c' object='tune_mul3k2-mul3k2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul3k2-mul3k2.obj `if test -f 'mul3k2.c'; then $(CYGPATH_W) 'mul3k2.c'; else $(CYGPATH_W) '$(srcdir)/mul3k2.c'; fi`

tune_mul3t-mul3t.o: mul3t.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul3t-mul3t.o -MD -MP -MF $(DEPDIR)/tune_mul3t-mul3t.Tpo -c -o tune_mul3t-mul3t.o `test -f 'mul3t.c' || echo '$(srcdir)/'`mul3t.c
	$(am__mv) $(DEPDIR)/tune_mul3t-mul3t.Tpo $(DEPDIR)/tune_mul3t-mul3t.Po
#	source='mul3t.c' object='tune_mul3t-mul3t.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul3t-mul3t.o `test -f 'mul3t.c' || echo '$(srcdir)/'`mul3t.c

tune_mul3t-mul3t.obj: mul3t.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul3t-mul3t.obj -MD -MP -MF $(DEPDIR)/tune_mul3t-mul3t.Tpo -c -o tune_mul3t-mul3t.obj `if test -f 'mul3t.c'; then $(CYGPATH_W) 'mul3t.c'; else $(CYGPATH_W) '$(srcdir)/mul3t.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul3t-mul3t.Tpo $(DEPDIR)/tune_mul3t-mul3t.Po
#	source='mul3t.c' object='tune_mul3t-mul3t.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul3t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul3t-mul3t.obj `if test -f 'mul3t.c'; then $(CYGPATH_W) 'mul3t.c'; else $(CYGPATH_W) '$(srcdir)/mul3t.c'; fi`

tune_mul4clk-mul4clk.o: mul4clk.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4clk_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul4clk-mul4clk.o -MD -MP -MF $(DEPDIR)/tune_mul4clk-mul4clk.Tpo -c -o tune_mul4clk-mul4clk.o `test -f 'mul4clk.c' || echo '$(srcdir)/'`mul4clk.c
	$(am__mv) $(DEPDIR)/tune_mul4clk-mul4clk.Tpo $(DEPDIR)/tune_mul4clk-mul4clk.Po
#	source='mul4clk.c' object='tune_mul4clk-mul4clk.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4clk_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul4clk-mul4clk.o `test -f 'mul4clk.c' || echo '$(srcdir)/'`mul4clk.c

tune_mul4clk-mul4clk.obj: mul4clk.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4clk_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul4clk-mul4clk.obj -MD -MP -MF $(DEPDIR)/tune_mul4clk-mul4clk.Tpo -c -o tune_mul4clk-mul4clk.obj `if test -f 'mul4clk.c'; then $(CYGPATH_W) 'mul4clk.c'; else $(CYGPATH_W) '$(srcdir)/mul4clk.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul4clk-mul4clk.Tpo $(DEPDIR)/tune_mul4clk-mul4clk.Po
#	source='mul4clk.c' object='tune_mul4clk-mul4clk.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4clk_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul4clk-mul4clk.obj `if test -f 'mul4clk.c'; then $(CYGPATH_W) 'mul4clk.c'; else $(CYGPATH_W) '$(srcdir)/mul4clk.c'; fi`

tune_mul4k-mul4k.o: mul4k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul4k-mul4k.o -MD -MP -MF $(DEPDIR)/tune_mul4k-mul4k.Tpo -c -o tune_mul4k-mul4k.o `test -f 'mul4k.c' || echo '$(srcdir)/'`mul4k.c
	$(am__mv) $(DEPDIR)/tune_mul4k-mul4k.Tpo $(DEPDIR)/tune_mul4k-mul4k.Po
#	source='mul4k.c' object='tune_mul4k-mul4k.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul4k-mul4k.o `test -f 'mul4k.c' || echo '$(srcdir)/'`mul4k.c

tune_mul4k-mul4k.obj: mul4k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul4k-mul4k.obj -MD -MP -MF $(DEPDIR)/tune_mul4k-mul4k.Tpo -c -o tune_mul4k-mul4k.obj `if test -f 'mul4k.c'; then $(CYGPATH_W) 'mul4k.c'; else $(CYGPATH_W) '$(srcdir)/mul4k.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul4k-mul4k.Tpo $(DEPDIR)/tune_mul4k-mul4k.Po
#	source='mul4k.c' object='tune_mul4k-mul4k.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul4k-mul4k.obj `if test -f 'mul4k.c'; then $(CYGPATH_W) 'mul4k.c'; else $(CYGPATH_W) '$(srcdir)/mul4k.c'; fi`

tune_mul4t-mul4t.o: mul4t.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul4t-mul4t.o -MD -MP -MF $(DEPDIR)/tune_mul4t-mul4t.Tpo -c -o tune_mul4t-mul4t.o `test -f 'mul4t.c' || echo '$(srcdir)/'`mul4t.c
	$(am__mv) $(DEPDIR)/tune_mul4t-mul4t.Tpo $(DEPDIR)/tune_mul4t-mul4t.Po
#	source='mul4t.c' object='tune_mul4t-mul4t.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul4t-mul4t.o `test -f 'mul4t.c' || echo '$(srcdir)/'`mul4t.c

tune_mul4t-mul4t.obj: mul4t.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul4t-mul4t.obj -MD -MP -MF $(DEPDIR)/tune_mul4t-mul4t.Tpo -c -o tune_mul4t-mul4t.obj `if test -f 'mul4t.c'; then $(CYGPATH_W) 'mul4t.c'; else $(CYGPATH_W) '$(srcdir)/mul4t.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul4t-mul4t.Tpo $(DEPDIR)/tune_mul4t-mul4t.Po
#	source='mul4t.c' object='tune_mul4t-mul4t.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul4t_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul4t-mul4t.obj `if test -f 'mul4t.c'; then $(CYGPATH_W) 'mul4t.c'; else $(CYGPATH_W) '$(srcdir)/mul4t.c'; fi`

tune_mul5clk_c-mul5clk_c.o: mul5clk_c.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5clk_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5clk_c-mul5clk_c.o -MD -MP -MF $(DEPDIR)/tune_mul5clk_c-mul5clk_c.Tpo -c -o tune_mul5clk_c-mul5clk_c.o `test -f 'mul5clk_c.c' || echo '$(srcdir)/'`mul5clk_c.c
	$(am__mv) $(DEPDIR)/tune_mul5clk_c-mul5clk_c.Tpo $(DEPDIR)/tune_mul5clk_c-mul5clk_c.Po
#	source='mul5clk_c.c' object='tune_mul5clk_c-mul5clk_c.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5clk_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5clk_c-mul5clk_c.o `test -f 'mul5clk_c.c' || echo '$(srcdir)/'`mul5clk_c.c

tune_mul5clk_c-mul5clk_c.obj: mul5clk_c.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5clk_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5clk_c-mul5clk_c.obj -MD -MP -MF $(DEPDIR)/tune_mul5clk_c-mul5clk_c.Tpo -c -o tune_mul5clk_c-mul5clk_c.obj `if test -f 'mul5clk_c.c'; then $(CYGPATH_W) 'mul5clk_c.c'; else $(CYGPATH_W) '$(srcdir)/mul5clk_c.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul5clk_c-mul5clk_c.Tpo $(DEPDIR)/tune_mul5clk_c-mul5clk_c.Po
#	source='mul5clk_c.c' object='tune_mul5clk_c-mul5clk_c.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5clk_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5clk_c-mul5clk_c.obj `if test -f 'mul5clk_c.c'; then $(CYGPATH_W) 'mul5clk_c.c'; else $(CYGPATH_W) '$(srcdir)/mul5clk_c.c'; fi`

tune_mul5k3-mul5k3.o: mul5k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k3-mul5k3.o -MD -MP -MF $(DEPDIR)/tune_mul5k3-mul5k3.Tpo -c -o tune_mul5k3-mul5k3.o `test -f 'mul5k3.c' || echo '$(srcdir)/'`mul5k3.c
	$(am__mv) $(DEPDIR)/tune_mul5k3-mul5k3.Tpo $(DEPDIR)/tune_mul5k3-mul5k3.Po
#	source='mul5k3.c' object='tune_mul5k3-mul5k3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k3-mul5k3.o `test -f 'mul5k3.c' || echo '$(srcdir)/'`mul5k3.c

tune_mul5k3-mul5k3.obj: mul5k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k3-mul5k3.obj -MD -MP -MF $(DEPDIR)/tune_mul5k3-mul5k3.Tpo -c -o tune_mul5k3-mul5k3.obj `if test -f 'mul5k3.c'; then $(CYGPATH_W) 'mul5k3.c'; else $(CYGPATH_W) '$(srcdir)/mul5k3.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul5k3-mul5k3.Tpo $(DEPDIR)/tune_mul5k3-mul5k3.Po
#	source='mul5k3.c' object='tune_mul5k3-mul5k3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k3-mul5k3.obj `if test -f 'mul5k3.c'; then $(CYGPATH_W) 'mul5k3.c'; else $(CYGPATH_W) '$(srcdir)/mul5k3.c'; fi`

tune_mul5k_a-mul5k_a.o: mul5k_a.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k_a-mul5k_a.o -MD -MP -MF $(DEPDIR)/tune_mul5k_a-mul5k_a.Tpo -c -o tune_mul5k_a-mul5k_a.o `test -f 'mul5k_a.c' || echo '$(srcdir)/'`mul5k_a.c
	$(am__mv) $(DEPDIR)/tune_mul5k_a-mul5k_a.Tpo $(DEPDIR)/tune_mul5k_a-mul5k_a.Po
#	source='mul5k_a.c' object='tune_mul5k_a-mul5k_a.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k_a-mul5k_a.o `test -f 'mul5k_a.c' || echo '$(srcdir)/'`mul5k_a.c

tune_mul5k_a-mul5k_a.obj: mul5k_a.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k_a-mul5k_a.obj -MD -MP -MF $(DEPDIR)/tune_mul5k_a-mul5k_a.Tpo -c -o tune_mul5k_a-mul5k_a.obj `if test -f 'mul5k_a.c'; then $(CYGPATH_W) 'mul5k_a.c'; else $(CYGPATH_W) '$(srcdir)/mul5k_a.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul5k_a-mul5k_a.Tpo $(DEPDIR)/tune_mul5k_a-mul5k_a.Po
#	source='mul5k_a.c' object='tune_mul5k_a-mul5k_a.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k_a-mul5k_a.obj `if test -f 'mul5k_a.c'; then $(CYGPATH_W) 'mul5k_a.c'; else $(CYGPATH_W) '$(srcdir)/mul5k_a.c'; fi`

tune_mul5k_b-mul5k_b.o: mul5k_b.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_b_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k_b-mul5k_b.o -MD -MP -MF $(DEPDIR)/tune_mul5k_b-mul5k_b.Tpo -c -o tune_mul5k_b-mul5k_b.o `test -f 'mul5k_b.c' || echo '$(srcdir)/'`mul5k_b.c
	$(am__mv) $(DEPDIR)/tune_mul5k_b-mul5k_b.Tpo $(DEPDIR)/tune_mul5k_b-mul5k_b.Po
#	source='mul5k_b.c' object='tune_mul5k_b-mul5k_b.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_b_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k_b-mul5k_b.o `test -f 'mul5k_b.c' || echo '$(srcdir)/'`mul5k_b.c

tune_mul5k_b-mul5k_b.obj: mul5k_b.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_b_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k_b-mul5k_b.obj -MD -MP -MF $(DEPDIR)/tune_mul5k_b-mul5k_b.Tpo -c -o tune_mul5k_b-mul5k_b.obj `if test -f 'mul5k_b.c'; then $(CYGPATH_W) 'mul5k_b.c'; else $(CYGPATH_W) '$(srcdir)/mul5k_b.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul5k_b-mul5k_b.Tpo $(DEPDIR)/tune_mul5k_b-mul5k_b.Po
#	source='mul5k_b.c' object='tune_mul5k_b-mul5k_b.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_b_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k_b-mul5k_b.obj `if test -f 'mul5k_b.c'; then $(CYGPATH_W) 'mul5k_b.c'; else $(CYGPATH_W) '$(srcdir)/mul5k_b.c'; fi`

tune_mul5k_c-mul5k_c.o: mul5k_c.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k_c-mul5k_c.o -MD -MP -MF $(DEPDIR)/tune_mul5k_c-mul5k_c.Tpo -c -o tune_mul5k_c-mul5k_c.o `test -f 'mul5k_c.c' || echo '$(srcdir)/'`mul5k_c.c
	$(am__mv) $(DEPDIR)/tune_mul5k_c-mul5k_c.Tpo $(DEPDIR)/tune_mul5k_c-mul5k_c.Po
#	source='mul5k_c.c' object='tune_mul5k_c-mul5k_c.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k_c-mul5k_c.o `test -f 'mul5k_c.c' || echo '$(srcdir)/'`mul5k_c.c

tune_mul5k_c-mul5k_c.obj: mul5k_c.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k_c-mul5k_c.obj -MD -MP -MF $(DEPDIR)/tune_mul5k_c-mul5k_c.Tpo -c -o tune_mul5k_c-mul5k_c.obj `if test -f 'mul5k_c.c'; then $(CYGPATH_W) 'mul5k_c.c'; else $(CYGPATH_W) '$(srcdir)/mul5k_c.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul5k_c-mul5k_c.Tpo $(DEPDIR)/tune_mul5k_c-mul5k_c.Po
#	source='mul5k_c.c' object='tune_mul5k_c-mul5k_c.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k_c-mul5k_c.obj `if test -f 'mul5k_c.c'; then $(CYGPATH_W) 'mul5k_c.c'; else $(CYGPATH_W) '$(srcdir)/mul5k_c.c'; fi`

tune_mul5k_d-mul5k_d.o: mul5k_d.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_d_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k_d-mul5k_d.o -MD -MP -MF $(DEPDIR)/tune_mul5k_d-mul5k_d.Tpo -c -o tune_mul5k_d-mul5k_d.o `test -f 'mul5k_d.c' || echo '$(srcdir)/'`mul5k_d.c
	$(am__mv) $(DEPDIR)/tune_mul5k_d-mul5k_d.Tpo $(DEPDIR)/tune_mul5k_d-mul5k_d.Po
#	source='mul5k_d.c' object='tune_mul5k_d-mul5k_d.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_d_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k_d-mul5k_d.o `test -f 'mul5k_d.c' || echo '$(srcdir)/'`mul5k_d.c

tune_mul5k_d-mul5k_d.obj: mul5k_d.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_d_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul5k_d-mul5k_d.obj -MD -MP -MF $(DEPDIR)/tune_mul5k_d-mul5k_d.Tpo -c -o tune_mul5k_d-mul5k_d.obj `if test -f 'mul5k_d.c'; then $(CYGPATH_W) 'mul5k_d.c'; else $(CYGPATH_W) '$(srcdir)/mul5k_d.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul5k_d-mul5k_d.Tpo $(DEPDIR)/tune_mul5k_d-mul5k_d.Po
#	source='mul5k_d.c' object='tune_mul5k_d-mul5k_d.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul5k_d_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul5k_d-mul5k_d.obj `if test -f 'mul5k_d.c'; then $(CYGPATH_W) 'mul5k_d.c'; else $(CYGPATH_W) '$(srcdir)/mul5k_d.c'; fi`

tune_mul6clk2-mul6clk2.o: mul6clk2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6clk2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul6clk2-mul6clk2.o -MD -MP -MF $(DEPDIR)/tune_mul6clk2-mul6clk2.Tpo -c -o tune_mul6clk2-mul6clk2.o `test -f 'mul6clk2.c' || echo '$(srcdir)/'`mul6clk2.c
	$(am__mv) $(DEPDIR)/tune_mul6clk2-mul6clk2.Tpo $(DEPDIR)/tune_mul6clk2-mul6clk2.Po
#	source='mul6clk2.c' object='tune_mul6clk2-mul6clk2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6clk2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul6clk2-mul6clk2.o `test -f 'mul6clk2.c' || echo '$(srcdir)/'`mul6clk2.c

tune_mul6clk2-mul6clk2.obj: mul6clk2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6clk2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul6clk2-mul6clk2.obj -MD -MP -MF $(DEPDIR)/tune_mul6clk2-mul6clk2.Tpo -c -o tune_mul6clk2-mul6clk2.obj `if test -f 'mul6clk2.c'; then $(CYGPATH_W) 'mul6clk2.c'; else $(CYGPATH_W) '$(srcdir)/mul6clk2.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul6clk2-mul6clk2.Tpo $(DEPDIR)/tune_mul6clk2-mul6clk2.Po
#	source='mul6clk2.c' object='tune_mul6clk2-mul6clk2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6clk2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul6clk2-mul6clk2.obj `if test -f 'mul6clk2.c'; then $(CYGPATH_W) 'mul6clk2.c'; else $(CYGPATH_W) '$(srcdir)/mul6clk2.c'; fi`

tune_mul6k_a-mul6k_a.o: mul6k_a.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul6k_a-mul6k_a.o -MD -MP -MF $(DEPDIR)/tune_mul6k_a-mul6k_a.Tpo -c -o tune_mul6k_a-mul6k_a.o `test -f 'mul6k_a.c' || echo '$(srcdir)/'`mul6k_a.c
	$(am__mv) $(DEPDIR)/tune_mul6k_a-mul6k_a.Tpo $(DEPDIR)/tune_mul6k_a-mul6k_a.Po
#	source='mul6k_a.c' object='tune_mul6k_a-mul6k_a.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul6k_a-mul6k_a.o `test -f 'mul6k_a.c' || echo '$(srcdir)/'`mul6k_a.c

tune_mul6k_a-mul6k_a.obj: mul6k_a.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul6k_a-mul6k_a.obj -MD -MP -MF $(DEPDIR)/tune_mul6k_a-mul6k_a.Tpo -c -o tune_mul6k_a-mul6k_a.obj `if test -f 'mul6k_a.c'; then $(CYGPATH_W) 'mul6k_a.c'; else $(CYGPATH_W) '$(srcdir)/mul6k_a.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul6k_a-mul6k_a.Tpo $(DEPDIR)/tune_mul6k_a-mul6k_a.Po
#	source='mul6k_a.c' object='tune_mul6k_a-mul6k_a.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul6k_a-mul6k_a.obj `if test -f 'mul6k_a.c'; then $(CYGPATH_W) 'mul6k_a.c'; else $(CYGPATH_W) '$(srcdir)/mul6k_a.c'; fi`

tune_mul6k_b-mul6k_b.o: mul6k_b.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_b_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul6k_b-mul6k_b.o -MD -MP -MF $(DEPDIR)/tune_mul6k_b-mul6k_b.Tpo -c -o tune_mul6k_b-mul6k_b.o `test -f 'mul6k_b.c' || echo '$(srcdir)/'`mul6k_b.c
	$(am__mv) $(DEPDIR)/tune_mul6k_b-mul6k_b.Tpo $(DEPDIR)/tune_mul6k_b-mul6k_b.Po
#	source='mul6k_b.c' object='tune_mul6k_b-mul6k_b.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_b_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul6k_b-mul6k_b.o `test -f 'mul6k_b.c' || echo '$(srcdir)/'`mul6k_b.c

tune_mul6k_b-mul6k_b.obj: mul6k_b.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_b_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul6k_b-mul6k_b.obj -MD -MP -MF $(DEPDIR)/tune_mul6k_b-mul6k_b.Tpo -c -o tune_mul6k_b-mul6k_b.obj `if test -f 'mul6k_b.c'; then $(CYGPATH_W) 'mul6k_b.c'; else $(CYGPATH_W) '$(srcdir)/mul6k_b.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul6k_b-mul6k_b.Tpo $(DEPDIR)/tune_mul6k_b-mul6k_b.Po
#	source='mul6k_b.c' object='tune_mul6k_b-mul6k_b.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_b_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul6k_b-mul6k_b.obj `if test -f 'mul6k_b.c'; then $(CYGPATH_W) 'mul6k_b.c'; else $(CYGPATH_W) '$(srcdir)/mul6k_b.c'; fi`

tune_mul6k_c-mul6k_c.o: mul6k_c.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul6k_c-mul6k_c.o -MD -MP -MF $(DEPDIR)/tune_mul6k_c-mul6k_c.Tpo -c -o tune_mul6k_c-mul6k_c.o `test -f 'mul6k_c.c' || echo '$(srcdir)/'`mul6k_c.c
	$(am__mv) $(DEPDIR)/tune_mul6k_c-mul6k_c.Tpo $(DEPDIR)/tune_mul6k_c-mul6k_c.Po
#	source='mul6k_c.c' object='tune_mul6k_c-mul6k_c.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul6k_c-mul6k_c.o `test -f 'mul6k_c.c' || echo '$(srcdir)/'`mul6k_c.c

tune_mul6k_c-mul6k_c.obj: mul6k_c.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul6k_c-mul6k_c.obj -MD -MP -MF $(DEPDIR)/tune_mul6k_c-mul6k_c.Tpo -c -o tune_mul6k_c-mul6k_c.obj `if test -f 'mul6k_c.c'; then $(CYGPATH_W) 'mul6k_c.c'; else $(CYGPATH_W) '$(srcdir)/mul6k_c.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul6k_c-mul6k_c.Tpo $(DEPDIR)/tune_mul6k_c-mul6k_c.Po
#	source='mul6k_c.c' object='tune_mul6k_c-mul6k_c.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul6k_c_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul6k_c-mul6k_c.obj `if test -f 'mul6k_c.c'; then $(CYGPATH_W) 'mul6k_c.c'; else $(CYGPATH_W) '$(srcdir)/mul6k_c.c'; fi`

tune_mul7cl-mul7cl.o: mul7cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul7cl-mul7cl.o -MD -MP -MF $(DEPDIR)/tune_mul7cl-mul7cl.Tpo -c -o tune_mul7cl-mul7cl.o `test -f 'mul7cl.c' || echo '$(srcdir)/'`mul7cl.c
	$(am__mv) $(DEPDIR)/tune_mul7cl-mul7cl.Tpo $(DEPDIR)/tune_mul7cl-mul7cl.Po
#	source='mul7cl.c' object='tune_mul7cl-mul7cl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul7cl-mul7cl.o `test -f 'mul7cl.c' || echo '$(srcdir)/'`mul7cl.c

tune_mul7cl-mul7cl.obj: mul7cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul7cl-mul7cl.obj -MD -MP -MF $(DEPDIR)/tune_mul7cl-mul7cl.Tpo -c -o tune_mul7cl-mul7cl.obj `if test -f 'mul7cl.c'; then $(CYGPATH_W) 'mul7cl.c'; else $(CYGPATH_W) '$(srcdir)/mul7cl.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul7cl-mul7cl.Tpo $(DEPDIR)/tune_mul7cl-mul7cl.Po
#	source='mul7cl.c' object='tune_mul7cl-mul7cl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul7cl-mul7cl.obj `if test -f 'mul7cl.c'; then $(CYGPATH_W) 'mul7cl.c'; else $(CYGPATH_W) '$(srcdir)/mul7cl.c'; fi`

tune_mul7k-mul7k.o: mul7k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul7k-mul7k.o -MD -MP -MF $(DEPDIR)/tune_mul7k-mul7k.Tpo -c -o tune_mul7k-mul7k.o `test -f 'mul7k.c' || echo '$(srcdir)/'`mul7k.c
	$(am__mv) $(DEPDIR)/tune_mul7k-mul7k.Tpo $(DEPDIR)/tune_mul7k-mul7k.Po
#	source='mul7k.c' object='tune_mul7k-mul7k.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul7k-mul7k.o `test -f 'mul7k.c' || echo '$(srcdir)/'`mul7k.c

tune_mul7k-mul7k.obj: mul7k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul7k-mul7k.obj -MD -MP -MF $(DEPDIR)/tune_mul7k-mul7k.Tpo -c -o tune_mul7k-mul7k.obj `if test -f 'mul7k.c'; then $(CYGPATH_W) 'mul7k.c'; else $(CYGPATH_W) '$(srcdir)/mul7k.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul7k-mul7k.Tpo $(DEPDIR)/tune_mul7k-mul7k.Po
#	source='mul7k.c' object='tune_mul7k-mul7k.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul7k-mul7k.obj `if test -f 'mul7k.c'; then $(CYGPATH_W) 'mul7k.c'; else $(CYGPATH_W) '$(srcdir)/mul7k.c'; fi`

tune_mul7k3-mul7k3.o: mul7k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul7k3-mul7k3.o -MD -MP -MF $(DEPDIR)/tune_mul7k3-mul7k3.Tpo -c -o tune_mul7k3-mul7k3.o `test -f 'mul7k3.c' || echo '$(srcdir)/'`mul7k3.c
	$(am__mv) $(DEPDIR)/tune_mul7k3-mul7k3.Tpo $(DEPDIR)/tune_mul7k3-mul7k3.Po
#	source='mul7k3.c' object='tune_mul7k3-mul7k3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul7k3-mul7k3.o `test -f 'mul7k3.c' || echo '$(srcdir)/'`mul7k3.c

tune_mul7k3-mul7k3.obj: mul7k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul7k3-mul7k3.obj -MD -MP -MF $(DEPDIR)/tune_mul7k3-mul7k3.Tpo -c -o tune_mul7k3-mul7k3.obj `if test -f 'mul7k3.c'; then $(CYGPATH_W) 'mul7k3.c'; else $(CYGPATH_W) '$(srcdir)/mul7k3.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul7k3-mul7k3.Tpo $(DEPDIR)/tune_mul7k3-mul7k3.Po
#	source='mul7k3.c' object='tune_mul7k3-mul7k3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul7k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul7k3-mul7k3.obj `if test -f 'mul7k3.c'; then $(CYGPATH_W) 'mul7k3.c'; else $(CYGPATH_W) '$(srcdir)/mul7k3.c'; fi`

tune_mul8k-mul8k.o: mul8k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul8k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul8k-mul8k.o -MD -MP -MF $(DEPDIR)/tune_mul8k-mul8k.Tpo -c -o tune_mul8k-mul8k.o `test -f 'mul8k.c' || echo '$(srcdir)/'`mul8k.c
	$(am__mv) $(DEPDIR)/tune_mul8k-mul8k.Tpo $(DEPDIR)/tune_mul8k-mul8k.Po
#	source='mul8k.c' object='tune_mul8k-mul8k.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul8k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul8k-mul8k.o `test -f 'mul8k.c' || echo '$(srcdir)/'`mul8k.c

tune_mul8k-mul8k.obj: mul8k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul8k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul8k-mul8k.obj -MD -MP -MF $(DEPDIR)/tune_mul8k-mul8k.Tpo -c -o tune_mul8k-mul8k.obj `if test -f 'mul8k.c'; then $(CYGPATH_W) 'mul8k.c'; else $(CYGPATH_W) '$(srcdir)/mul8k.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul8k-mul8k.Tpo $(DEPDIR)/tune_mul8k-mul8k.Po
#	source='mul8k.c' object='tune_mul8k-mul8k.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul8k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul8k-mul8k.obj `if test -f 'mul8k.c'; then $(CYGPATH_W) 'mul8k.c'; else $(CYGPATH_W) '$(srcdir)/mul8k.c'; fi`

tune_mul9cl-mul9cl.o: mul9cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9cl-mul9cl.o -MD -MP -MF $(DEPDIR)/tune_mul9cl-mul9cl.Tpo -c -o tune_mul9cl-mul9cl.o `test -f 'mul9cl.c' || echo '$(srcdir)/'`mul9cl.c
	$(am__mv) $(DEPDIR)/tune_mul9cl-mul9cl.Tpo $(DEPDIR)/tune_mul9cl-mul9cl.Po
#	source='mul9cl.c' object='tune_mul9cl-mul9cl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9cl-mul9cl.o `test -f 'mul9cl.c' || echo '$(srcdir)/'`mul9cl.c

tune_mul9cl-mul9cl.obj: mul9cl.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9cl-mul9cl.obj -MD -MP -MF $(DEPDIR)/tune_mul9cl-mul9cl.Tpo -c -o tune_mul9cl-mul9cl.obj `if test -f 'mul9cl.c'; then $(CYGPATH_W) 'mul9cl.c'; else $(CYGPATH_W) '$(srcdir)/mul9cl.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul9cl-mul9cl.Tpo $(DEPDIR)/tune_mul9cl-mul9cl.Po
#	source='mul9cl.c' object='tune_mul9cl-mul9cl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9cl_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9cl-mul9cl.obj `if test -f 'mul9cl.c'; then $(CYGPATH_W) 'mul9cl.c'; else $(CYGPATH_W) '$(srcdir)/mul9cl.c'; fi`

tune_mul9clk2-mul9clk2.o: mul9clk2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9clk2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9clk2-mul9clk2.o -MD -MP -MF $(DEPDIR)/tune_mul9clk2-mul9clk2.Tpo -c -o tune_mul9clk2-mul9clk2.o `test -f 'mul9clk2.c' || echo '$(srcdir)/'`mul9clk2.c
	$(am__mv) $(DEPDIR)/tune_mul9clk2-mul9clk2.Tpo $(DEPDIR)/tune_mul9clk2-mul9clk2.Po
#	source='mul9clk2.c' object='tune_mul9clk2-mul9clk2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9clk2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9clk2-mul9clk2.o `test -f 'mul9clk2.c' || echo '$(srcdir)/'`mul9clk2.c

tune_mul9clk2-mul9clk2.obj: mul9clk2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9clk2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9clk2-mul9clk2.obj -MD -MP -MF $(DEPDIR)/tune_mul9clk2-mul9clk2.Tpo -c -o tune_mul9clk2-mul9clk2.obj `if test -f 'mul9clk2.c'; then $(CYGPATH_W) 'mul9clk2.c'; else $(CYGPATH_W) '$(srcdir)/mul9clk2.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul9clk2-mul9clk2.Tpo $(DEPDIR)/tune_mul9clk2-mul9clk2.Po
#	source='mul9clk2.c' object='tune_mul9clk2-mul9clk2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9clk2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9clk2-mul9clk2.obj `if test -f 'mul9clk2.c'; then $(CYGPATH_W) 'mul9clk2.c'; else $(CYGPATH_W) '$(srcdir)/mul9clk2.c'; fi`

tune_mul9k-mul9k.o: mul9k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9k-mul9k.o -MD -MP -MF $(DEPDIR)/tune_mul9k-mul9k.Tpo -c -o tune_mul9k-mul9k.o `test -f 'mul9k.c' || echo '$(srcdir)/'`mul9k.c
	$(am__mv) $(DEPDIR)/tune_mul9k-mul9k.Tpo $(DEPDIR)/tune_mul9k-mul9k.Po
#	source='mul9k.c' object='tune_mul9k-mul9k.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9k-mul9k.o `test -f 'mul9k.c' || echo '$(srcdir)/'`mul9k.c

tune_mul9k-mul9k.obj: mul9k.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9k-mul9k.obj -MD -MP -MF $(DEPDIR)/tune_mul9k-mul9k.Tpo -c -o tune_mul9k-mul9k.obj `if test -f 'mul9k.c'; then $(CYGPATH_W) 'mul9k.c'; else $(CYGPATH_W) '$(srcdir)/mul9k.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul9k-mul9k.Tpo $(DEPDIR)/tune_mul9k-mul9k.Po
#	source='mul9k.c' object='tune_mul9k-mul9k.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9k-mul9k.obj `if test -f 'mul9k.c'; then $(CYGPATH_W) 'mul9k.c'; else $(CYGPATH_W) '$(srcdir)/mul9k.c'; fi`

tune_mul9k2-mul9k2.o: mul9k2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9k2-mul9k2.o -MD -MP -MF $(DEPDIR)/tune_mul9k2-mul9k2.Tpo -c -o tune_mul9k2-mul9k2.o `test -f 'mul9k2.c' || echo '$(srcdir)/'`mul9k2.c
	$(am__mv) $(DEPDIR)/tune_mul9k2-mul9k2.Tpo $(DEPDIR)/tune_mul9k2-mul9k2.Po
#	source='mul9k2.c' object='tune_mul9k2-mul9k2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9k2-mul9k2.o `test -f 'mul9k2.c' || echo '$(srcdir)/'`mul9k2.c

tune_mul9k2-mul9k2.obj: mul9k2.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9k2-mul9k2.obj -MD -MP -MF $(DEPDIR)/tune_mul9k2-mul9k2.Tpo -c -o tune_mul9k2-mul9k2.obj `if test -f 'mul9k2.c'; then $(CYGPATH_W) 'mul9k2.c'; else $(CYGPATH_W) '$(srcdir)/mul9k2.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul9k2-mul9k2.Tpo $(DEPDIR)/tune_mul9k2-mul9k2.Po
#	source='mul9k2.c' object='tune_mul9k2-mul9k2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k2_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9k2-mul9k2.obj `if test -f 'mul9k2.c'; then $(CYGPATH_W) 'mul9k2.c'; else $(CYGPATH_W) '$(srcdir)/mul9k2.c'; fi`

tune_mul9k3-mul9k3.o: mul9k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9k3-mul9k3.o -MD -MP -MF $(DEPDIR)/tune_mul9k3-mul9k3.Tpo -c -o tune_mul9k3-mul9k3.o `test -f 'mul9k3.c' || echo '$(srcdir)/'`mul9k3.c
	$(am__mv) $(DEPDIR)/tune_mul9k3-mul9k3.Tpo $(DEPDIR)/tune_mul9k3-mul9k3.Po
#	source='mul9k3.c' object='tune_mul9k3-mul9k3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9k3-mul9k3.o `test -f 'mul9k3.c' || echo '$(srcdir)/'`mul9k3.c

tune_mul9k3-mul9k3.obj: mul9k3.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT tune_mul9k3-mul9k3.obj -MD -MP -MF $(DEPDIR)/tune_mul9k3-mul9k3.Tpo -c -o tune_mul9k3-mul9k3.obj `if test -f 'mul9k3.c'; then $(CYGPATH_W) 'mul9k3.c'; else $(CYGPATH_W) '$(srcdir)/mul9k3.c'; fi`
	$(am__mv) $(DEPDIR)/tune_mul9k3-mul9k3.Tpo $(DEPDIR)/tune_mul9k3-mul9k3.Po
#	source='mul9k3.c' object='tune_mul9k3-mul9k3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tune_mul9k3_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o tune_mul9k3-mul9k3.obj `if test -f 'mul9k3.c'; then $(CYGPATH_W) 'mul9k3.c'; else $(CYGPATH_W) '$(srcdir)/mul9k3.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(HEADERS)
installdirs:
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: all check install install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am


# The stuff after "-- begin generated code --" following this comment
# block is auto-generated by a perl script, from the input data provided
# in this comment block in the ACTIVE COMMENTS below.
#
# After changing the set of functions to be tested below, use
#  perl -i ./generate-test-list.pl Makefile.am
# in order to regenerate the generated automake code (note that the
# generation is done in place)
#* test_sizes 1 2 3 4 5 6 7 8 9
#* if GF2X_32BIT_SOURCES
#*   test gen_mul1_w32k{2..6}
#* endif
#* if GF2X_64BIT_SOURCES
#*   test gen_mul1_w64k{2..6}
#* endif
#*   test mul2k
#*   test mul3k
#*   test mul3k2
#*   test mul4k
#*   test mul5k_a
#*   test mul5k_b
#*   test mul5k_c
#*   test mul5k_d
#*   test mul6k_a
#*   test mul6k_b
#*   test mul6k_c
#*   test mul7k
#*   test mul8k
#*   test mul9k
#*   test mul9k2
#* if GF2X_SSE2_AVAILABLE
#*   if GF2X_64BIT_SOURCES
#*     test mul2t
#*     test mul2t2
#*   endif
#*   if GF2X_32BIT_SOURCES
#*     test mul4t
#*     test mul3t
#*   endif
#* endif
#* if GF2X_PCLMUL_AVAILABLE
#*   test mul1cl
#*   test mul2cl
# mul2cl2 uses psrldq, which is slightly different.
#*   test mul2cl2
#*   test mul3cl
#*   test mul4clk
#*   test mul5clk_c
#*   test mul5k3
#*   test mul6clk2
#*   test mul7cl
#*   test mul7k3
#*   test mul9k3
#*   test mul9clk2
#*   test mul9cl
#* endif
# -- begin generated code --
tuning_undefs_1.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/1/g < $< > $@
tuneup_1.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/1/g < $< > $@
tuneup_1.$(OBJEXT): tuning_undefs_1.h

tuning_undefs_2.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/2/g < $< > $@
tuneup_2.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/2/g < $< > $@
tuneup_2.$(OBJEXT): tuning_undefs_2.h

tuning_undefs_3.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/3/g < $< > $@
tuneup_3.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/3/g < $< > $@
tuneup_3.$(OBJEXT): tuning_undefs_3.h

tuning_undefs_4.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/4/g < $< > $@
tuneup_4.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/4/g < $< > $@
tuneup_4.$(OBJEXT): tuning_undefs_4.h

tuning_undefs_5.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/5/g < $< > $@
tuneup_5.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/5/g < $< > $@
tuneup_5.$(OBJEXT): tuning_undefs_5.h

tuning_undefs_6.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/6/g < $< > $@
tuneup_6.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/6/g < $< > $@
tuneup_6.$(OBJEXT): tuning_undefs_6.h

tuning_undefs_7.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/7/g < $< > $@
tuneup_7.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/7/g < $< > $@
tuneup_7.$(OBJEXT): tuning_undefs_7.h

tuning_undefs_8.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/8/g < $< > $@
tuneup_8.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/8/g < $< > $@
tuneup_8.$(OBJEXT): tuning_undefs_8.h

tuning_undefs_9.h: tuning_undefs_pre.h ; sed -e s/@@SIZE@@/9/g < $< > $@
tuneup_9.c: $(srcdir)/tuneup_pre.c ; sed -e s/@@SIZE@@/9/g < $< > $@
tuneup_9.$(OBJEXT): tuning_undefs_9.h
gen_mul1_w32k2.$(OBJEXT): tuning_undefs_1.h
gen_mul1_w32k2.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 32 2 > $@
gen_mul1_w32k3.$(OBJEXT): tuning_undefs_1.h
gen_mul1_w32k3.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 32 3 > $@
gen_mul1_w32k4.$(OBJEXT): tuning_undefs_1.h
gen_mul1_w32k4.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 32 4 > $@
gen_mul1_w32k5.$(OBJEXT): tuning_undefs_1.h
gen_mul1_w32k5.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 32 5 > $@
gen_mul1_w32k6.$(OBJEXT): tuning_undefs_1.h
gen_mul1_w32k6.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 32 6 > $@
#gen_mul1_w64k2.$(OBJEXT): tuning_undefs_1.h
#gen_mul1_w64k2.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 64 2 > $@
#gen_mul1_w64k3.$(OBJEXT): tuning_undefs_1.h
#gen_mul1_w64k3.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 64 3 > $@
#gen_mul1_w64k4.$(OBJEXT): tuning_undefs_1.h
#gen_mul1_w64k4.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 64 4 > $@
#gen_mul1_w64k5.$(OBJEXT): tuning_undefs_1.h
#gen_mul1_w64k5.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 64 5 > $@
#gen_mul1_w64k6.$(OBJEXT): tuning_undefs_1.h
#gen_mul1_w64k6.c: gen_bb_mul_code$(EXEEXT) ; ./gen_bb_mul_code 64 6 > $@
mul2k.$(OBJEXT): tuning_undefs_2.h
mul3k.$(OBJEXT): tuning_undefs_3.h
mul3k2.$(OBJEXT): tuning_undefs_3.h
mul4k.$(OBJEXT): tuning_undefs_4.h
mul5k_a.$(OBJEXT): tuning_undefs_5.h
mul5k_b.$(OBJEXT): tuning_undefs_5.h
mul5k_c.$(OBJEXT): tuning_undefs_5.h
mul5k_d.$(OBJEXT): tuning_undefs_5.h
mul6k_a.$(OBJEXT): tuning_undefs_6.h
mul6k_b.$(OBJEXT): tuning_undefs_6.h
mul6k_c.$(OBJEXT): tuning_undefs_6.h
mul7k.$(OBJEXT): tuning_undefs_7.h
mul8k.$(OBJEXT): tuning_undefs_8.h
mul9k.$(OBJEXT): tuning_undefs_9.h
mul9k2.$(OBJEXT): tuning_undefs_9.h
#mul2t.$(OBJEXT): tuning_undefs_2.h
#mul2t2.$(OBJEXT): tuning_undefs_2.h
mul4t.$(OBJEXT): tuning_undefs_4.h
mul3t.$(OBJEXT): tuning_undefs_3.h
#mul1cl.$(OBJEXT): tuning_undefs_1.h
#mul2cl.$(OBJEXT): tuning_undefs_2.h
#mul2cl2.$(OBJEXT): tuning_undefs_2.h
#mul3cl.$(OBJEXT): tuning_undefs_3.h
#mul4clk.$(OBJEXT): tuning_undefs_4.h
#mul5clk_c.$(OBJEXT): tuning_undefs_5.h
#mul5k3.$(OBJEXT): tuning_undefs_5.h
#mul6clk2.$(OBJEXT): tuning_undefs_6.h
#mul7cl.$(OBJEXT): tuning_undefs_7.h
#mul7k3.$(OBJEXT): tuning_undefs_7.h
#mul9k3.$(OBJEXT): tuning_undefs_9.h
#mul9clk2.$(OBJEXT): tuning_undefs_9.h
#mul9cl.$(OBJEXT): tuning_undefs_9.h
tune-lowlevel: $(LOWLEVEL)
	cd $(top_builddir) ; $(MAKE)
	MAKE="$(MAKE)" srcdir=$(srcdir)	\
	perl $(srcdir)/tune-lowlevel.pl $(LOWLEVEL)

tunetoom.res: tunetoom$(EXEEXT)
	./tunetoom -s 1.05 $(TOOM_TUNING_LIMIT) -o tunetoom.res

tune-toom: tunetoom.res update-thresholds$(EXEEXT)
	cd $(top_builddir) ; $(MAKE)
	cat ../gf2x/gf2x-thresholds.h > tuned_thresholds.h
	./update-thresholds -o tuned_thresholds.h < tunetoom.res
	mkdir -p ../already_tuned/tuned/
	mv -f tuned_thresholds.h ../already_tuned/tuned/gf2x-thresholds.h
	rm -f ../gf2x/gf2x-thresholds.h
	ln -sf ../already_tuned/tuned/gf2x-thresholds.h ../gf2x/
	cd $(top_builddir) ; $(MAKE)

tunefft.res: tunefft$(EXEEXT)
	./tunefft -s 1.02 $(FFT_TUNING_LIMIT) -o tunefft.res

tune-fft: tunefft.res update-thresholds$(EXEEXT)
	cd $(top_builddir) ; $(MAKE)
	cat ../gf2x/gf2x-thresholds.h > tuned_thresholds.h
	./update-thresholds -o tuned_thresholds.h < tunefft.res
	mkdir -p ../already_tuned/tuned/
	mv -f tuned_thresholds.h ../already_tuned/tuned/gf2x-thresholds.h
	rm -f ../gf2x/gf2x-thresholds.h
	ln -sf ../already_tuned/tuned/gf2x-thresholds.h ../gf2x/
	cd $(top_builddir) ; $(MAKE)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
