/**
 * 
 */
package edu.biu.scapi.interactiveMidProtocols.commitmentScheme;

import java.io.IOException;

import edu.biu.scapi.exceptions.CheatAttemptException;
import edu.biu.scapi.exceptions.CommitValueException;

/**
 * This the general interface of the Receiver side of a Commitment Scheme. A commitment scheme has a commitment phase in which the Receiver waits for the commitment
 * sent by the Committer; and a decommitment phase in which the Receiver waits for the decommitment sent by the Committer and checks whether to accept or reject the decommitment.  
 * @author Cryptography and Computer Security Research Group Department of Computer Science Bar-Ilan University (Yael Ejgenberg)
 *
 */
public interface CmtReceiver {

	/**
	 * This function is the heart of the commitment phase from the Receiver's point of view. 
	 * @return the id of the commitment and some other information if necessary according to the implementing class. 
	 * @throws ClassNotFoundException if the commitment received cannot be deserialized
	 * @throws IOException if there is any problem at the communication level
	 */
	public CmtRCommitPhaseOutput receiveCommitment() throws ClassNotFoundException, IOException;

	/**
	 * This function is the heart of the decommitment phase from the Receiver's point of view.
	 * @param id wait for a specific message according to this id
	 * @return the commitment
	 * @throws ClassNotFoundException if the decommitment received cannot be deserialized
	 * @throws IOException if there is any problem at the communication level.
	 * @throws CommitValueException if the commit value does not match the implementing commitment.
	 * @throws CheatAttemptException if there is an error that could have been caused by a cheating attempt
	 */
	public CmtCommitValue receiveDecommitment(long id) throws ClassNotFoundException, IOException, CommitValueException, CheatAttemptException;
	
	/**
	 * Return the values used during the pre-process phase (usually upon construction). Since these values vary between the different implementations this function
	 * returns a general array of Objects.
	 * @return a general array of Objects
	 */
	public Object[] getPreProcessedValues();
	
	/**
	 * Return the intermediate values used during the commitment phase.
	 * @param id get the commitment values according to this id.
	 * @return a general array of Objects.
	 */
	public Object getCommitmentPhaseValues(long id);
	
	/**
	 * This function converts the given commit value to a byte array. 
	 * @param value to get its bytes.
	 * @return the generated bytes.
	 */
	public byte[] generateBytesFromCommitValue(CmtCommitValue value);
}